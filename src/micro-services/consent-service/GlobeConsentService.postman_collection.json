{
	"info": {
		"_postman_id": "ebf2ee96-9951-43fd-b675-682c333ad248",
		"name": "Globe Consent Micro Service",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create Consent",
			"item": [
				{
					"name": "Successfully Create a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									"const uuid = require('uuid');",
									"function setEnv (key, value)  {",
									"    pm.environment.set(key, value);",
									"}",
									"",
									"function getEnv (key)  {",
									"    return pm.environment.get(key);",
									"}",
									"",
									"setEnv('app_id', uuid.v4());",
									"setEnv('developer_id', uuid.v4());",
									"pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id:getEnv('app_id'),blacklist: true})",
									"    }",
									"}, function (err, response) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"    if (subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id);",
									"    }",
									"",
									"    console.log(getEnv('subscriber_id'), getEnv('app_id'));",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    }, function(err, response){",
									"        let {transaction_id} = response.json();",
									"        if(transaction_id) {",
									"            setEnv('transaction_id',transaction_id);",
									"        }",
									"        console.log(getEnv('subscriber_id'), getEnv('app_id'), getEnv('subscriber_id'));",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"    ",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "470624d9-fb2a-4355-bbff-071a9ea3c500",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code is 201 or 302 or 200\", function () {",
									"    pm.expect(_responseCode).to.be.oneOf([201,200,302]);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain response properties as needed\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    switch(_responseCode) {",
									"        case 201: case 200:",
									"            pm.expect(jsonData).to.have.property(\"old_token\");",
									"            pm.expect(jsonData).to.have.property(\"old_token_value\");",
									"            pm.expect(jsonData.old_token).to.eql(false);",
									"            pm.expect(jsonData.old_token_value).to.eql(\"\");",
									"            break;",
									"        case 302:",
									"            pm.expect(jsonData).to.have.property(\"status\");",
									"            pm.expect(jsonData.status).to.eql('Record already Exists!');",
									"            break;",
									"            ",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successfully Create or Update Consent For different scopes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
									"    }",
									"}, function (err, response) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"     if (subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id);",
									"    }",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    }, function(err, response){",
									"        if(response.json().transaction_id) {",
									"            setEnv('transaction_id', response.json().transaction_id);",
									"        }",
									"       ",
									"        console.log(getEnv('transaction_id'));",
									"            pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ subscriber_id: getEnv('subscriber_id'),",
									"    transaction_id : getEnv('transaction_id'),",
									"    app_id: getEnv('app_id'),",
									"  developer_id: getEnv('developer_id'),",
									"  scopes: [ \"sms\", \"location\" ],",
									"  appname : getEnv('appname')})",
									"        }",
									"    }, function(err, response){",
									"        console.log({err});",
									"    });",
									"    });",
									"});",
									"",
									"",
									"",
									"",
									"    ",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "470624d9-fb2a-4355-bbff-071a9ea3c500",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(_responseCode).to.eql(200);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain falsy / null old token in response\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"old_token\");",
									"    pm.expect(jsonData).to.have.property(\"old_token_value\");",
									"    pm.expect(jsonData.old_token).to.eql(false);",
									"    pm.expect(jsonData.old_token_value).to.eql(\"\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\", \"contacts\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail For Invalid Transaction Id Create a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"pm.test(\"Should contain Transaction id is not valid in status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"Transaction id is not valid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"1chei39ejifj\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without scopes Create a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without scopes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without appname Create a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without appname\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"1chei39ejifj\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ]\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without Subscriber Id in Create a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without subscriber Id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without App Id in Create a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without App Id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without Developer Id in Create a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without Developer Id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update Consent",
			"item": [
				{
					"name": "Successful Update a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28c28f5c-2742-4cd7-be3e-b92b1f93ca07",
								"exec": [
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
									"    }",
									"}, function (err, response) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"    if(subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id); ",
									"    }",
									"",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    }, function(err, response){",
									"        if (response.json().transaction_id){",
									"           setEnv('transaction_id', response.json().transaction_id);",
									"        }",
									" ",
									"        //  creating consent",
									"        pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname')})",
									"        }",
									"    }, function(err, response){",
									"        console.log({err});",
									"    });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "609830bc-110d-48d8-aae0-bb1db5241bef",
								"exec": [
									"",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain properties old_token and old_token_value \", function () {",
									"    let jsonData = pm.response.json();",
									"    //  response has property old_token, old_token_value",
									"    pm.expect(jsonData).to.have.property(\"old_token\");",
									"    pm.expect(jsonData).to.have.property(\"old_token_value\");",
									"});",
									"",
									"",
									"pm.test(\"Should have resepective values for old_token and old_token_value\", function () {",
									"    let jsonData = pm.response.json();",
									"    //  check old_token property has only boolean",
									"    pm.expect(jsonData.old_token).to.be.oneOf([true, false]);",
									"    //  truthy value should have truthy  value",
									"    if (jsonData.old_token) {",
									"        pm.expect(jsonData.old_token_value).not.equal(\"\");",
									"    } else {",
									"        pm.expect(jsonData.old_token_value).to.eql(\"\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \n    \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [\n    \"sms\",\n    \"location\",\n    \"sns\",\n    \"contacts\"\n  ],\n  \"appname\" : \"{{appname}}\",\n  \"access_token\": \"{{$guid}}\"\n}\n  \n  \n\n  \n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail for Invalid Transaction ID Update a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28c28f5c-2742-4cd7-be3e-b92b1f93ca07",
								"exec": [
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
									"    }",
									"}, function (err, response) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"      if(subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id); ",
									"    }",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    }, function(err, response){",
									"         if (response.json().transaction_id){",
									"           setEnv('transaction_id', response.json().transaction_id);",
									"        }",
									"        //  creating consent",
									"        pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname')})",
									"        }",
									"    }, function(err, response){",
									"        console.log({err});",
									"    });",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "609830bc-110d-48d8-aae0-bb1db5241bef",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"pm.test(\"Should contain Transaction id is not valid in status\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"Transaction id is not valid\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \n    \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{$guid}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [\n    \"sms\",\n    \"location\",\n    \"sns\",\n    \"contacts\"\n  ],\n  \"appname\" : \"{{appname}}\",\n  \"access_token\": \"{{$guid}}\"\n}\n  \n  \n\n  \n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without scopes Update a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without scopes\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without appname Update a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without appname\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"1chei39ejifj\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ]\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							],
							"query": [
								{
									"key": "",
									"value": "",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without Subscriber Id in Update a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without subscriber Id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without App Id in Update a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without App Id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without Developer Id in Update a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83874ba4-e766-459e-8666-76f0fba8578f",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"Should Be a badRequest without Developer Id\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n"
						},
						"url": {
							"raw": "{{host_consent}}/consent",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Revoke App Consent",
			"item": [
				{
					"name": "Successful Revoke a Consent",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
								"exec": [
									"// get postman env",
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"//  get postman env",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"",
									"// generate otp",
									"function generateOtp(cb) {",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
									"        getEnv('app_id'), blacklist: true})",
									"    }",
									"}, (err, response) => cb(err, response, createConsent) );",
									"}",
									"",
									"",
									"// verify otp",
									"function verifyOtp(err, response, cb) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"      if(subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id); ",
									"    }",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    },(err, response) => cb(err, response, updateConsent));",
									"}",
									"// create consent",
									"function createConsent(err, response, cb) {",
									"   if(response.json().transaction_id) {",
									"         setEnv('transaction_id', response.json().transaction_id);",
									"    }",
									"        //  creating consent",
									"        pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname')})",
									"        }",
									"    }, (err, response) => cb(err, response));",
									"}",
									"// update consent",
									"function updateConsent(err, response) {",
									"   ",
									"  ",
									"        //  creating consent",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_consent\") +\"/consent\",",
									"    method: 'PUT',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname'),",
									"        access_token: \"GGYYYSWwx\"",
									"        }),",
									"        }",
									"    });",
									"}",
									"//  consent flow ready",
									"",
									"//  call generate otp",
									"generateOtp(verifyOtp);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code should be 201 or 403\", function () {",
									"    pm.expect(_responseCode).to.be.oneOf([201,403]);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain response properties as needed\", function () {",
									"    let jsonData = pm.response.json();",
									"   switch(_responseCode) {",
									"       case 201:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
									"                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); ",
									"                    break;",
									"       case 403:",
									"                    pm.expect(jsonData).to.have.property(\"status\");",
									"                    pm.expect(jsonData.status).to.eql(\"Forbidden\");",
									"       ",
									"   }    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"app_id\": \"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n  \"developer_id\": \"{{developer_id}}\"\n}"
						},
						"url": {
							"raw": "{{host_consent}}/revoke/{{subscriber_id}}",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"revoke",
								"{{subscriber_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get ConsentList",
			"item": [
				{
					"name": "Successful Get Consent App List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e581ad09-9016-4085-93bd-fffcacb93e85",
								"exec": [
									"let jsonData = pm.response.json();",
									"//  susccess response",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"//  response body should contain following properties check",
									"pm.test(\"Response Body should contain response properties as needed\", function () {",
									"    pm.expect(jsonData).to.have.property(\"page\");",
									"    pm.expect(jsonData).to.have.property(\"limit\");",
									"    pm.expect(jsonData).to.have.property(\"resultcount\");",
									"    pm.expect(jsonData).to.have.property(\"apps\");",
									"});",
									"",
									"if(jsonData.resultcount > 0){",
									"    //  for more than 0 resultcount check",
									"pm.test(\"Response Body apps should contain non empty array for resultcount > 0\", function () {",
									" ",
									"    pm.expect(jsonData.apps.length).to.be.above(0);",
									"});",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_consent}}/consent/{{subscriber_id}}/list",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent",
								"{{subscriber_id}}",
								"list"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without Subscriber Id Get Consent App List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "df1c7a15-8da0-4de3-83a1-428764608081",
								"exec": [
									"",
									"// fail cases",
									"pm.test(\"Status code should not be 200\", function () {",
									"    pm.expect(pm.response.code).not.equal(200);",
									"});",
									"// fail cases",
									"pm.test(\"Status code should be 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_consent}}/consent/list",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"consent",
								"list"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Revoke All App Consent",
			"item": [
				{
					"name": "Successful Revoke All",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "92239682-dc89-4c69-82ad-eef4d837ce03",
								"exec": [
									"// get postman env",
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"//  get postman env",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"",
									"// generate otp",
									"function generateOtp(cb) {",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
									"        getEnv('app_id'), blacklist: true})",
									"    }",
									"}, (err, response) => cb(err, response, createConsent) );",
									"}",
									"",
									"",
									"// verify otp",
									"function verifyOtp(err, response, cb) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"      if(subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id); ",
									"    }",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    },(err, response) => cb(err, response, updateConsent));",
									"}",
									"// create consent",
									"function createConsent(err, response, cb) {",
									"   if(response.json().transaction_id) {",
									"         setEnv('transaction_id', response.json().transaction_id);",
									"    }",
									"        //  creating consent",
									"        pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname')})",
									"        }",
									"    }, (err, response) => cb(err, response));",
									"}",
									"// update consent",
									"function updateConsent(err, response) {",
									"   ",
									"  ",
									"        //  creating consent",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_consent\") +\"/consent\",",
									"    method: 'PUT',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname'),",
									"        access_token: \"GGYYYSWwx\"",
									"        }),",
									"        }",
									"    });",
									"}",
									"//  consent flow ready",
									"",
									"//  call generate otp",
									"generateOtp(verifyOtp);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ee33765-63ad-4f3e-9e92-7a899fcc455c",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code should be 201 or 403\", function () {",
									"    pm.expect(_responseCode).to.be.oneOf([201,403]);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain response properties as needed\", function () {",
									"    let jsonData = pm.response.json();",
									"   switch(_responseCode) {",
									"       case 201:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
									"                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); ",
									"                    break;",
									"       case 403:",
									"                    pm.expect(jsonData).to.have.property(\"status\");",
									"                    pm.expect(jsonData.status).to.eql(\"Forbidden\");",
									"       ",
									"   }    ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"subscriber_id\": \"27ebb7307b843f2937373618d9cc5bd1\"\n}"
						},
						"url": {
							"raw": "{{host_consent}}/revoke/all",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"revoke",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Blacklist",
			"item": [
				{
					"name": "Successfully Create Black List app",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
								"exec": [
									"// get postman env",
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"//  get postman env",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"",
									"// generate otp",
									"function generateOtp(cb) {",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
									"        getEnv('app_id'), blacklist: true})",
									"    }",
									"}, (err, response) => cb(err, response, createConsent) );",
									"}",
									"",
									"",
									"// verify otp",
									"function verifyOtp(err, response, cb) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"      if(subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id); ",
									"    }",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    },(err, response) => cb(err, response, updateConsent));",
									"}",
									"// create consent",
									"function createConsent(err, response, cb) {",
									"   if(response.json().transaction_id) {",
									"         setEnv('transaction_id', response.json().transaction_id);",
									"    }",
									"        //  creating consent",
									"        pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname')})",
									"        }",
									"    }, (err, response) => cb(err, response));",
									"}",
									"// update consent",
									"function updateConsent(err, response) {",
									"   ",
									"  ",
									"        //  creating consent",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_consent\") +\"/consent\",",
									"    method: 'PUT',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname'),",
									"        access_token: \"GGYYYSWwx\"",
									"        }),",
									"        }",
									"    });",
									"}",
									"//  consent flow ready",
									"",
									"//  call generate otp",
									"generateOtp(verifyOtp);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dca3c364-4c37-44a5-9c28-2415950b5741",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code should be 201 or 302\", function () {",
									"    pm.expect(_responseCode).to.be.oneOf([201, 302]);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain response properties as needed\", function () {",
									"    let jsonData = pm.response.json();",
									"",
									"    switch(_responseCode) {",
									"        case 201:",
									"            pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
									"            pm.expect(jsonData.revoked_tokens.length).not.equal(0);",
									"            break;",
									"        case 302:",
									"            pm.expect(jsonData).to.have.property(\"status\");",
									"            pm.expect(jsonData.status).to.eql('Record already exists!');",
									"            break;",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\"\n}"
						},
						"url": {
							"raw": "{{host_consent}}/blacklist",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"blacklist"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail for No Access token or record found , Create Black List app",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
								"exec": [
									"// get postman env",
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"//  get postman env",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"",
									"// generate otp",
									"function generateOtp(cb) {",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
									"        getEnv('app_id'), blacklist: true})",
									"    }",
									"}, (err, response) => cb(err, response, createConsent) );",
									"}",
									"",
									"",
									"// verify otp",
									"function verifyOtp(err, response, cb) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"      if(subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id); ",
									"    }",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    },(err, response) => cb(err, response, updateConsent));",
									"}",
									"// create consent",
									"function createConsent(err, response, cb) {",
									"   if(response.json().transaction_id) {",
									"         setEnv('transaction_id', response.json().transaction_id);",
									"    }",
									"        //  creating consent",
									"        pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname')})",
									"        }",
									"    }, (err, response) => cb(err, response));",
									"}",
									"// update consent",
									"function updateConsent(err, response) {",
									"   ",
									"  ",
									"        //  creating consent",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_consent\") +\"/consent\",",
									"    method: 'PUT',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname'),",
									"        access_token: \"GGYYYSWwx\"",
									"        }),",
									"        }",
									"    });",
									"}",
									"//  consent flow ready",
									"",
									"//  call generate otp",
									"generateOtp(verifyOtp);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dca3c364-4c37-44a5-9c28-2415950b5741",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code should be 403\", function () {",
									"    pm.expect(_responseCode).to.eql(403);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain response properties as needed\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"status\");",
									"    pm.expect(jsonData.status).to.eql('Forbidden');",
									"         ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"app_id\": \"dfdfsds\",\n  \"developer_id\": \"384hfhf\"\n}"
						},
						"url": {
							"raw": "{{host_consent}}/blacklist",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"blacklist"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Check App Is Blacklisted",
			"item": [
				{
					"name": "Success Check App is BlackListed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49f97bba-5e31-43c1-8e81-981b2b0b59d7",
								"exec": [
									"// get postman env",
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"//  get postman env",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"",
									"",
									"// generate otp",
									"function generateOtp(cb) {",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
									"        getEnv('app_id'), blacklist: true})",
									"    }",
									"}, (err, response) => cb(err, response, createConsent) );",
									"}",
									"",
									"",
									"// verify otp",
									"function verifyOtp(err, response, cb) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"      if(subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id); ",
									"    }",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    },(err, response) => cb(err, response, updateConsent));",
									"}",
									"// create consent",
									"function createConsent(err, response, cb) {",
									"   if(response.json().transaction_id) {",
									"         setEnv('transaction_id', response.json().transaction_id);",
									"    }",
									"        //  creating consent",
									"        pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname')})",
									"        }",
									"    }, (err, response) => cb(err, response, createBlacklist));",
									"}",
									"// update consent",
									"function updateConsent(err, response,cb ) {",
									"   ",
									"  ",
									"        //  creating consent",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_consent\") +\"/consent\",",
									"    method: 'PUT',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname'),",
									"        access_token: \"GGYYYSWwx\"",
									"        })",
									"        },",
									"    }, (err, response) => cb(err, response));",
									"}",
									"// create blacklist",
									"function createBlacklist() {",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_consent\") +\"/blacklist\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id')",
									"        }),",
									"        }",
									"    });",
									"}",
									"//  consent flow ready",
									"",
									"//  call generate otp",
									"generateOtp(verifyOtp);",
									"",
									"//  consent flow ready",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cba6f0a7-2eea-48e4-b94c-d79c71800791",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.expect(_responseCode).to.eql(200);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain response (is_blacklisted) with boolean value\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"is_blacklisted\");",
									"    pm.expect(jsonData.is_blacklisted).to.be.a('boolean');",
									"         ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_consent}}/blacklist/{{subscriber_id}}/{{app_id}}",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"blacklist",
								"{{subscriber_id}}",
								"{{app_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Success With an invalid record, Check App is BlackListed",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49f97bba-5e31-43c1-8e81-981b2b0b59d7",
								"exec": [
									"// get postman env",
									"let setEnv = (key, value) => {",
									"    pm.environment.set(key, value);",
									"};",
									"//  get postman env",
									"let getEnv = (key) => {",
									"    return pm.environment.get(key);",
									"}",
									"",
									"",
									"// generate otp",
									"function generateOtp(cb) {",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
									"        getEnv('app_id'), blacklist: true})",
									"    }",
									"}, (err, response) => cb(err, response, createConsent) );",
									"}",
									"",
									"",
									"// verify otp",
									"function verifyOtp(err, response, cb) {",
									"    let {subscriber_id, app_id, otp} = response.json();",
									"      if(subscriber_id && app_id) {",
									"        setEnv('subscriber_id', subscriber_id);",
									"        setEnv('app_id', app_id); ",
									"    }",
									"    pm.sendRequest({",
									"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
									"        }",
									"    },(err, response) => cb(err, response, updateConsent));",
									"}",
									"// create consent",
									"function createConsent(err, response, cb) {",
									"   if(response.json().transaction_id) {",
									"         setEnv('transaction_id', response.json().transaction_id);",
									"    }",
									"        //  creating consent",
									"        pm.sendRequest({",
									"        url: getEnv(\"host_consent\") +\"/consent\",",
									"        method: 'POST',",
									"        header: {",
									"            'content-type': 'application/json'",
									"        },",
									"        body: {",
									"            mode: 'raw',",
									"            raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname')})",
									"        }",
									"    }, (err, response) => cb(err, response, createBlacklist));",
									"}",
									"// update consent",
									"function updateConsent(err, response,cb ) {",
									"   ",
									"  ",
									"        //  creating consent",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_consent\") +\"/consent\",",
									"    method: 'PUT',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        transaction_id : getEnv('transaction_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id'),",
									"        scopes: getEnv('scopes'),",
									"        appname : getEnv('appname'),",
									"        access_token: \"GGYYYSWwx\"",
									"        })",
									"        },",
									"    }, (err, response) => cb(err, response));",
									"}",
									"// create blacklist",
									"function createBlacklist() {",
									"    pm.sendRequest({",
									"    url: getEnv(\"host_consent\") +\"/blacklist\",",
									"    method: 'POST',",
									"    header: {",
									"        'content-type': 'application/json'",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({ ",
									"        subscriber_id: getEnv('subscriber_id'),",
									"        app_id: getEnv('app_id'),",
									"        developer_id: getEnv('developer_id')",
									"        }),",
									"        }",
									"    });",
									"}",
									"//  consent flow ready",
									"",
									"//  call generate otp",
									"generateOtp(verifyOtp);",
									"",
									"//  consent flow ready",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cba6f0a7-2eea-48e4-b94c-d79c71800791",
								"exec": [
									"pm.test(\"Status code should be 404\", function () {",
									"    pm.expect(pm.response.code).to.eql(404);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_consent}}/blacklist/{{subscriber_id}}",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"blacklist",
								"{{subscriber_id}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "14c6dbdc-7729-4b0f-9144-02798aa182d5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6a4ec977-77b6-47ee-8a0f-a5f4c329d966",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Get Subscriber Apps",
			"item": [
				{
					"name": "Successful Get Subscriber Apps List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.expect(_responseCode).to.eql(200);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain response (appname) with array of values\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"appname\");",
									"    pm.expect(jsonData.appname).to.be.a('array');",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_consent}}/app/search/{{subscriber_id}}",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"app",
								"search",
								"{{subscriber_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Successful for invalid subscriber id Get Subscriber Apps List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code should be 200\", function () {",
									"    pm.expect(_responseCode).to.eql(200);",
									"});",
									"",
									"//  ",
									"pm.test(\"Should contain response (appname) with array of no values\", function () {",
									"    let jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"appname\");",
									"    pm.expect(jsonData.appname).to.be.a('array');",
									"    pm.expect(jsonData.appname.length).to.eql(0);     ",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_consent}}/app/search/17383",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"app",
								"search",
								"17383"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fail without subscriber id Get Subscriber Apps List",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
								"exec": [
									"let _responseCode = pm.response.code;",
									"/*  201 for Newly created Endpoint",
									"*   302 for existing record with same scope ",
									"*/",
									"pm.test(\"Status code should be 404\", function () {",
									"    pm.expect(_responseCode).to.eql(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host_consent}}/app/search",
							"host": [
								"{{host_consent}}"
							],
							"path": [
								"app",
								"search"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}