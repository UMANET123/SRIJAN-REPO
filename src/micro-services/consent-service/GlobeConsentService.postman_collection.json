{
	"id": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"name": "Globe Wakanda Micro Services",
	"description": null,
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "c4f8b934-93fb-4962-8d17-227161a4b75c",
	"type": "text/javascript",
	"exec": [
	""
	]
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "f3b08939-90a4-48e7-8728-79b0543dc71c",
	"type": "text/javascript",
	"exec": [
	""
	]
	}
	}
	],
	"variables": [],
	"order": [
	"f8158d55-28b5-4287-84dd-eb6f0bb8cad4",
	"81334457-d212-46af-94a3-319db95bffe0"
	],
	"folders_order": [
	"28fbd15b-6535-4f03-89ae-c83002783514",
	"5278d046-298e-4853-86eb-94531a08f8d3"
	],
	"folders": [
	{
	"id": "28fbd15b-6535-4f03-89ae-c83002783514",
	"name": "Auth Micro Service",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": null,
	"order": [],
	"folders_order": [
	"4be18333-7781-44a7-a839-cad5b490b311",
	"bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"07883f09-8264-4d5e-9b26-8fbbb3b11cf6",
	"34b478fd-742a-4d03-b573-700997012b52",
	"b4609759-73cc-4090-b6ed-f66fba586b05",
	"97bd51a0-3227-46e3-9a1c-0ae228d9091a",
	"d9e9e799-39ee-45a4-8996-9c3143311419",
	"645336af-855b-4caf-8a3c-7f479ed92897"
	],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "28fbd15b-6535-4f03-89ae-c83002783514"
	},
	{
	"id": "e45f8853-3583-4979-97cf-c35130782fe5",
	"name": "Check App Is Blacklisted",
	"description": null,
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "14c6dbdc-7729-4b0f-9144-02798aa182d5",
	"type": "text/javascript",
	"exec": [
	""
	]
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "6a4ec977-77b6-47ee-8a0f-a5f4c329d966",
	"type": "text/javascript",
	"exec": [
	""
	]
	}
	}
	],
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "5278d046-298e-4853-86eb-94531a08f8d3",
	"order": [
	"ae3ab645-204a-4264-a661-643bc0e70baf",
	"2f0547c1-4891-4746-a4a7-48d2867cd6e5"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "e45f8853-3583-4979-97cf-c35130782fe5"
	},
	{
	"id": "5278d046-298e-4853-86eb-94531a08f8d3",
	"name": "Consent Micro Service",
	"description": "",
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": null,
	"order": [],
	"folders_order": [
	"778ae5d8-2215-496e-a4a3-faa54b5d9943",
	"6191e377-ba93-4f84-939c-b329bb4d7359",
	"4b8d18fe-4eba-464c-a70a-635ffc11a890",
	"12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"73ae1f49-2286-4a39-9a4c-ada43b8cdc36",
	"e45f8853-3583-4979-97cf-c35130782fe5",
	"24c67b02-8cfb-416f-8bb1-69aa5f6fe626"
	],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "5278d046-298e-4853-86eb-94531a08f8d3"
	},
	{
	"id": "24c67b02-8cfb-416f-8bb1-69aa5f6fe626",
	"name": "Create Blacklist",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "5278d046-298e-4853-86eb-94531a08f8d3",
	"order": [
	"52f2c4b8-7012-44c5-bd15-17f5d9e44f85",
	"b38a71ef-10e8-4a05-843c-8d6a438a7212",
	"a239f3ef-b80c-40cb-96a6-e5e17b4db4c8",
	"5d65b3c4-6114-400c-b99d-766b20322880",
	"308da090-00be-4538-b63d-744b3947aa97"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "24c67b02-8cfb-416f-8bb1-69aa5f6fe626"
	},
	{
	"id": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"name": "Create Consent",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "5278d046-298e-4853-86eb-94531a08f8d3",
	"order": [
	"d0a3c2e2-37db-47c6-a42d-0c5d0dc50315",
	"0459d341-9f36-48c0-a7d8-b57856e9c592",
	"7745dbf0-d5cb-4717-89bf-c9a62f5ee208",
	"4e703e33-70e1-4153-a267-8eba71c0bc48",
	"04b02d1d-2e2c-4cf1-8ecb-8dcec14afaca",
	"a0f21e83-add7-4cb9-876c-0001d93e8876",
	"13a392cf-788e-4f6e-bdf5-5ed4a5a5063b"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5"
	},
	{
	"id": "d9e9e799-39ee-45a4-8996-9c3143311419",
	"name": "Create Transaction",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "28fbd15b-6535-4f03-89ae-c83002783514",
	"order": [
	"09d69258-0c92-4fa0-9ce5-f29014a9f1de"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "d9e9e799-39ee-45a4-8996-9c3143311419"
	},
	{
	"id": "4be18333-7781-44a7-a839-cad5b490b311",
	"name": "Generate TOTP",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "28fbd15b-6535-4f03-89ae-c83002783514",
	"order": [
	"77f891e6-782f-4ce5-ae45-b515cd7ac68d",
	"31072ca7-9be1-4be5-b074-e43167b83f6e",
	"0a64c0d5-2a89-4c7f-a271-8abcdc0706cc",
	"334948ca-1c5b-4d94-b4df-481f74b0c90e",
	"db3cc746-2de3-4a32-ae0b-39a898441984",
	"80d37733-58ca-45f4-8999-e57b506a4a45",
	"69a9e8c2-500b-4348-aa1f-c5045252ef19",
	"9845b3b0-83b8-41fa-9bb9-30f38d3d802f"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "4be18333-7781-44a7-a839-cad5b490b311"
	},
	{
	"id": "4b8d18fe-4eba-464c-a70a-635ffc11a890",
	"name": "Get ConsentList",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "5278d046-298e-4853-86eb-94531a08f8d3",
	"order": [
	"e0cd3726-6b97-4b39-8b5c-0b08492c10e9",
	"bddb7045-a3a8-4781-90c6-48e86ed28d7f"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "4b8d18fe-4eba-464c-a70a-635ffc11a890"
	},
	{
	"id": "6191e377-ba93-4f84-939c-b329bb4d7359",
	"name": "Get Subscriber Apps",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "5278d046-298e-4853-86eb-94531a08f8d3",
	"order": [
	"26855519-e8cc-4e3e-8f67-400256095128",
	"03652c24-8f3c-4071-9ce7-dd9a38d848d9",
	"9b47ad89-40b7-40a0-82c3-eccfe8b125ce"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "6191e377-ba93-4f84-939c-b329bb4d7359"
	},
	{
	"id": "97bd51a0-3227-46e3-9a1c-0ae228d9091a",
	"name": "Get Transaction",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "28fbd15b-6535-4f03-89ae-c83002783514",
	"order": [
	"81f7345f-bc30-41c2-9b43-bd6706ea23d5",
	"20dc5016-76f4-4150-bb53-070969138d56",
	"4f6ee7e0-069a-45b2-97e8-d355f055405b"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "97bd51a0-3227-46e3-9a1c-0ae228d9091a"
	},
	{
	"id": "34b478fd-742a-4d03-b573-700997012b52",
	"name": "Invalidate Transaction",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "28fbd15b-6535-4f03-89ae-c83002783514",
	"order": [
	"289793f4-7480-4849-8d6b-d6f602fc9293"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "34b478fd-742a-4d03-b573-700997012b52"
	},
	{
	"id": "778ae5d8-2215-496e-a4a3-faa54b5d9943",
	"name": "Revoke All App Consent",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "5278d046-298e-4853-86eb-94531a08f8d3",
	"order": [
	"b1df7262-49bc-4463-90f9-5d2c579d93df",
	"934ef7b2-980d-4d21-a39f-588c4e00f0ca"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "778ae5d8-2215-496e-a4a3-faa54b5d9943"
	},
	{
	"id": "73ae1f49-2286-4a39-9a4c-ada43b8cdc36",
	"name": "Revoke App Consent",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "5278d046-298e-4853-86eb-94531a08f8d3",
	"order": [
	"9c1bb85a-f642-4526-99b8-06e5aa92c1df",
	"a6ddb2c2-886f-492a-9313-27b7360b6c98",
	"4e08ade3-f22e-483d-b6a2-c97fb080488a",
	"f27e9b87-b3e1-425a-beb2-d293f48cdae7"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "73ae1f49-2286-4a39-9a4c-ada43b8cdc36"
	},
	{
	"id": "b4609759-73cc-4090-b6ed-f66fba586b05",
	"name": "Sms Api Checking",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "28fbd15b-6535-4f03-89ae-c83002783514",
	"order": [
	"b926d914-a62f-4297-bce8-a17727dbf0e2",
	"d6df182a-5f37-488e-aeed-86c3b1d6e6b1",
	"9ba63123-f2de-4369-9d1f-9050ec0ac980"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "b4609759-73cc-4090-b6ed-f66fba586b05"
	},
	{
	"id": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"name": "Update Consent",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "5278d046-298e-4853-86eb-94531a08f8d3",
	"order": [
	"e30eed6c-2054-4d34-903c-050278d2ffdb",
	"c6d464b3-1680-492b-b302-b2a83cb13b31",
	"832bd611-5529-48e3-93f2-413c98ec40ba",
	"bec54451-4d0c-4dd6-b0f4-8ede78be19dc",
	"d668f4e0-1443-4eaf-b2fb-0d3897b216e9",
	"3c08166a-2f00-4a20-b345-11c24ecf56cd",
	"d3a7bf5c-8198-4182-84bc-61af921e74a7"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b"
	},
	{
	"id": "645336af-855b-4caf-8a3c-7f479ed92897",
	"name": "Update Transaction",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "28fbd15b-6535-4f03-89ae-c83002783514",
	"order": [
	"05c55b66-cd80-4681-ae89-f42de5511e69",
	"e2072f93-b190-4909-9efa-461dc1830674",
	"9722405a-ad41-4f97-a1d8-862fe2786df5",
	"73ebda34-5c70-4654-81ed-74ef75f74de3"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "645336af-855b-4caf-8a3c-7f479ed92897"
	},
	{
	"id": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"name": "Verify TOTP",
	"description": null,
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "28fbd15b-6535-4f03-89ae-c83002783514",
	"order": [
	"eee673ef-e517-40af-89cc-8d3e09ba47b0",
	"987d3a24-3e17-4f07-941e-eb12f9a1fe0f",
	"1a9dd0e3-de85-4530-a7e2-be5fe421d7ca",
	"a191b473-55f2-462d-9a87-bc4966951f2e",
	"cb87c51b-785f-4594-ab76-788bf18b06aa",
	"d61cf24d-c712-4fde-b088-4d6b4ecea639",
	"217ac3a9-d19a-4011-b5b6-21613c8f11fb",
	"c55de865-f5d1-4575-857c-4be8b77573cb"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f"
	},
	{
	"id": "07883f09-8264-4d5e-9b26-8fbbb3b11cf6",
	"name": "Verify User",
	"description": "",
	"auth": null,
	"events": null,
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folder": "28fbd15b-6535-4f03-89ae-c83002783514",
	"order": [
	"9a28d26f-da89-4056-bad7-95715eb6dbcc"
	],
	"folders_order": [],
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"folderId": "07883f09-8264-4d5e-9b26-8fbbb3b11cf6"
	}
	],
	"requests": [
	{
	"id": "03652c24-8f3c-4071-9ce7-dd9a38d848d9",
	"name": "Successful for invalid subscriber id Get Subscriber Apps List",
	"url": "{{host_consent}}/app/search/17383",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code should be 200\", function () {",
	"    pm.expect(_responseCode).to.eql(200);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain response (appname) with array of no values\", function () {",
	"    let jsonData = pm.response.json();",
	"    pm.expect(jsonData).to.have.property(\"appname\");",
	"    pm.expect(jsonData.appname).to.be.a('array');",
	"    pm.expect(jsonData.appname.length).to.eql(0);     ",
	"    ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "6191e377-ba93-4f84-939c-b329bb4d7359",
	"preRequestScript": null,
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 200\", function () {\n    pm.expect(_responseCode).to.eql(200);\n});\n\n//  \npm.test(\"Should contain response (appname) with array of no values\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"appname\");\n    pm.expect(jsonData.appname).to.be.a('array');\n    pm.expect(jsonData.appname.length).to.eql(0);     \n    \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "0459d341-9f36-48c0-a7d8-b57856e9c592",
	"name": "Successfully Create or Update Consent For different scopes",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
	"    }",
	"}, function (err, response) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"     if (subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id);",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    }, function(err, response){",
	"        if(response.json().transaction_id) {",
	"            setEnv('transaction_id', response.json().transaction_id);",
	"        }",
	"       ",
	"        console.log(getEnv('transaction_id'));",
	"            pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ subscriber_id: getEnv('subscriber_id'),",
	"    transaction_id : getEnv('transaction_id'),",
	"    app_id: getEnv('app_id'),",
	"  developer_id: getEnv('developer_id'),",
	"  scopes: [ \"sms\", \"location\" ],",
	"  appname : getEnv('appname')})",
	"        }",
	"    }, function(err, response){",
	"        console.log({err});",
	"    });",
	"    });",
	"});",
	"",
	"",
	"",
	"",
	"    ",
	"",
	"",
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "470624d9-fb2a-4355-bbff-071a9ea3c500",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code is 200\", function () {",
	"    pm.expect(_responseCode).to.eql(200);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain falsy / null old token in response\", function () {",
	"    let jsonData = pm.response.json();",
	"    pm.expect(jsonData).to.have.property(\"old_token\");",
	"    pm.expect(jsonData).to.have.property(\"old_token_value\");",
	"    pm.expect(jsonData.old_token).to.eql(false);",
	"    pm.expect(jsonData.old_token_value).to.eql(\"\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"preRequestScript": "let setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\npm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})\n    }\n}, function (err, response) {\n    let {subscriber_id, app_id, otp} = response.json();\n     if (subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id);\n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    }, function(err, response){\n        if(response.json().transaction_id) {\n            setEnv('transaction_id', response.json().transaction_id);\n        }\n       \n        console.log(getEnv('transaction_id'));\n            pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ subscriber_id: getEnv('subscriber_id'),\n    transaction_id : getEnv('transaction_id'),\n    app_id: getEnv('app_id'),\n  developer_id: getEnv('developer_id'),\n  scopes: [ \"sms\", \"location\" ],\n  appname : getEnv('appname')})\n        }\n    }, function(err, response){\n        console.log({err});\n    });\n    });\n});\n\n\n\n\n    \n\n\n",
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code is 200\", function () {\n    pm.expect(_responseCode).to.eql(200);\n});\n\n//  \npm.test(\"Should contain falsy / null old token in response\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"old_token\");\n    pm.expect(jsonData).to.have.property(\"old_token_value\");\n    pm.expect(jsonData.old_token).to.eql(false);\n    pm.expect(jsonData.old_token_value).to.eql(\"\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\", \"contacts\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "04b02d1d-2e2c-4cf1-8ecb-8dcec14afaca",
	"name": "Fail without Subscriber Id in Create a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without subscriber Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without subscriber Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "05c55b66-cd80-4681-ae89-f42de5511e69",
	"name": "Successfully Update Transaction",
	"url": "{{host_auth}}/transaction/{{transaction_id}}",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 200\", function () {",
	"    pm.response.to.have.status(200);",
	"});",
	"",
	"",
	"pm.test(\"Should contain response properties as needed\", function () {",
	"    let jsonData = pm.response.json();",
	"    pm.expect(jsonData).to.have.property(\"response_type\");",
	"    pm.expect(jsonData.response_type).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"client_id\");",
	"    pm.expect(jsonData.client_id).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"redirect_uri\");",
	"    pm.expect(jsonData.redirect_uri).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"scopes\");",
	"    pm.expect(jsonData.scopes).to.be.a(\"array\");",
	"        pm.expect(jsonData).to.have.property(\"state\");",
	"    pm.expect(jsonData.state).to.be.a(\"string\");",
	"      pm.expect(jsonData).to.have.property(\"auth_state\");",
	"    pm.expect(jsonData.auth_state).to.be.a(\"number\");",
	"        pm.expect(jsonData).to.have.property(\"subscriber_id\");",
	"    pm.expect(jsonData.app_id).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"app_id\");",
	"    pm.expect(jsonData.app_id).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"developer_id\");",
	"    pm.expect(jsonData.developer_id).to.be.a(\"string\");",
	" ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "645336af-855b-4caf-8a3c-7f479ed92897",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"response_type\");\n    pm.expect(jsonData.response_type).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"client_id\");\n    pm.expect(jsonData.client_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"redirect_uri\");\n    pm.expect(jsonData.redirect_uri).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"scopes\");\n    pm.expect(jsonData.scopes).to.be.a(\"array\");\n        pm.expect(jsonData).to.have.property(\"state\");\n    pm.expect(jsonData.state).to.be.a(\"string\");\n      pm.expect(jsonData).to.have.property(\"auth_state\");\n    pm.expect(jsonData.auth_state).to.be.a(\"number\");\n        pm.expect(jsonData).to.have.property(\"subscriber_id\");\n    pm.expect(jsonData.app_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"app_id\");\n    pm.expect(jsonData.app_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"developer_id\");\n    pm.expect(jsonData.developer_id).to.be.a(\"string\");\n \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"response_type\": \"sample_type2q\",\n  \"subscriber_id\": \"type21\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"asasa\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\",\n  \"status\": 0\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "09d69258-0c92-4fa0-9ce5-f29014a9f1de",
	"name": "Successfully Create Transaction",
	"url": "{{host_auth}}/transaction",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"value": "application/json",
	"type": "text"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 201\", function () {",
	"    pm.response.to.have.status(201);",
	"});",
	"",
	"",
	"pm.environment.set(\"transaction_id\", pm.response.json().transaction_id);",
	"pm.test(\"Should contain response properties as needed\", function () {",
	"    let jsonData = pm.response.json();",
	"    pm.expect(jsonData).to.have.property(\"transaction_id\");",
	"    pm.expect(jsonData.transaction_id).to.be.a(\"string\");",
	" ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "d9e9e799-39ee-45a4-8996-9c3143311419",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 201\", function () {\n    pm.response.to.have.status(201);\n});\n\n\npm.environment.set(\"transaction_id\", pm.response.json().transaction_id);\npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"transaction_id\");\n    pm.expect(jsonData.transaction_id).to.be.a(\"string\");\n \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"response_type\": \"sample_type\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"scope2\",\n    \"scope3\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "0a64c0d5-2a89-4c7f-a271-8abcdc0706cc",
	"name": "Fail to Generate OTP, Wrong Mobile No. Copy",
	"url": "{{host_auth}}/generate/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should contain BadRequest in Error Code\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4be18333-7781-44a7-a839-cad5b490b311",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"msisdn\" : \"0937006210\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": true,\n    \"transaction_id\": \"{{transaction_id}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "13a392cf-788e-4f6e-bdf5-5ed4a5a5063b",
	"name": "Fail without Developer Id in Create a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without Developer Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without Developer Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "1a9dd0e3-de85-4530-a7e2-be5fe421d7ca",
	"name": "Fail Verify TOTP, OTP wrong",
	"url": "{{remote_host}}/verify/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
	"exec": [
	"pm.test(\"Status code is 403\", function () {",
	"    pm.response.to.have.status(403);",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"123456\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "20dc5016-76f4-4150-bb53-070969138d56",
	"name": "Successfully Not Conent for Get Transaction with invalid Transaction ID",
	"url": "{{host_auth}}/transaction/fd7447",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 204\", function () {",
	"    pm.response.to.have.status(204);",
	"});",
	"",
	"",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "97bd51a0-3227-46e3-9a1c-0ae228d9091a",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 204\", function () {\n    pm.response.to.have.status(204);\n});\n\n\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "217ac3a9-d19a-4011-b5b6-21613c8f11fb",
	"name": "Failed to  Verify TOTP, OTP already verified",
	"url": "{{host_auth}}/verify/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"pm.test(\"Your test name\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql('InvalidOTP');",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Your test name\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql('InvalidOTP');\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"{{otp}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "26855519-e8cc-4e3e-8f67-400256095128",
	"name": "Successful Get Subscriber Apps List",
	"url": "{{host_consent}}/app/search/{{subscriber_id}}",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code should be 200\", function () {",
	"    pm.expect(_responseCode).to.eql(200);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain response (appname) with array of values\", function () {",
	"    let jsonData = pm.response.json();",
	"    pm.expect(jsonData).to.have.property(\"appname\");",
	"    pm.expect(jsonData.appname).to.be.a('array');",
	"    ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "6191e377-ba93-4f84-939c-b329bb4d7359",
	"preRequestScript": null,
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 200\", function () {\n    pm.expect(_responseCode).to.eql(200);\n});\n\n//  \npm.test(\"Should contain response (appname) with array of values\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"appname\");\n    pm.expect(jsonData.appname).to.be.a('array');\n    \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "289793f4-7480-4849-8d6b-d6f602fc9293",
	"name": "Successfully Invalidate Transaction",
	"url": "{{host_auth}}/transaction/{{transaction_id}}/invalidate",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"value": "application/json",
	"type": "text"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "b354d6e8-181f-446f-a821-ef6d2865ed33",
	"exec": [
	"pm.test(\"Status code is 200\", function () {",
	"    pm.response.to.have.status(200);",
	"});"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "prerequest",
	"script": {
	"id": "79baf8a9-fec4-457a-93d5-d9299753785f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "34b478fd-742a-4d03-b573-700997012b52",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"subscriber_id\":\"{{subscriber_id}}\",\n\t\"app_id\":\"{{app_id}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "2f0547c1-4891-4746-a4a7-48d2867cd6e5",
	"name": "Fail 404 With an invalid record, Check App is BlackListed",
	"url": "{{host_consent}}/blacklist/{{subscriber_id}}",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json",
	"enabled": false
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "49f97bba-5e31-43c1-8e81-981b2b0b59d7",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response, createBlacklist));",
	"}",
	"// update consent",
	"function updateConsent(err, response,cb ) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        })",
	"        },",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// create blacklist",
	"function createBlacklist() {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/blacklist\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id')",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);",
	"",
	"//  consent flow ready",
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "cba6f0a7-2eea-48e4-b94c-d79c71800791",
	"exec": [
	"pm.test(\"Status code should be 404\", function () {",
	"    pm.expect(pm.response.code).to.eql(404);",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "e45f8853-3583-4979-97cf-c35130782fe5",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response, createBlacklist));\n}\n// update consent\nfunction updateConsent(err, response,cb ) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        })\n        },\n    }, (err, response) => cb(err, response));\n}\n// create blacklist\nfunction createBlacklist() {\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/blacklist\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id')\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);\n\n//  consent flow ready\n",
	"tests": "pm.test(\"Status code should be 404\", function () {\n    pm.expect(pm.response.code).to.eql(404);\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "//Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "308da090-00be-4538-b63d-744b3947aa97",
	"name": "Fail for No developer id in request body Create Black List app ",
	"url": "{{host_consent}}/blacklist",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "dca3c364-4c37-44a5-9c28-2415950b5741",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without App Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "24c67b02-8cfb-416f-8bb1-69aa5f6fe626",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"app_id\": \"dfdfsds\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "31072ca7-9be1-4be5-b074-e43167b83f6e",
	"name": "Fail to Generate OTP, No transaction id",
	"url": "{{host_auth}}/generate/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should contain BadRequest in Error Code\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4be18333-7781-44a7-a839-cad5b490b311",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"msisdn\" : \"{{sms_address}}\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": true\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "334948ca-1c5b-4d94-b4df-481f74b0c90e",
	"name": "Fail to Generate OTP, NO Mobile No.",
	"url": "{{host_auth}}/generate/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should contain BadRequest in Error Code\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4be18333-7781-44a7-a839-cad5b490b311",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"msisdn\" : \"\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": true\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "3c08166a-2f00-4a20-b345-11c24ecf56cd",
	"name": "Fail without App Id in Update a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without App Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "4e08ade3-f22e-483d-b6a2-c97fb080488a",
	"name": "Fail without App Id Revoke a Consent",
	"url": "{{host_consent}}/revoke/{{subscriber_id}}",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without scopes\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "73ae1f49-2286-4a39-9a4c-ada43b8cdc36",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without scopes\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"developer_id\": \"{{developer_id}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "4e703e33-70e1-4153-a267-8eba71c0bc48",
	"name": "Fail without appname Create a Consent",
	"url": "{{host_consent}}/consent?",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [
	{
	"key": "",
	"value": "",
	"enabled": false
	}
	],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without appname\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without appname\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"1chei39ejifj\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ]\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "4f6ee7e0-069a-45b2-97e8-d355f055405b",
	"name": "Fail Get Transaction without transaction ID",
	"url": "{{host_auth}}/transaction",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 404\", function () {",
	"    pm.response.to.have.status(404);",
	"});",
	"",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "97bd51a0-3227-46e3-9a1c-0ae228d9091a",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 404\", function () {\n    pm.response.to.have.status(404);\n});\n\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "52f2c4b8-7012-44c5-bd15-17f5d9e44f85",
	"name": "Successfully Create Black List app",
	"url": "{{host_consent}}/blacklist",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "dca3c364-4c37-44a5-9c28-2415950b5741",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code should be 201 or 302\", function () {",
	"    pm.expect(_responseCode).to.be.oneOf([201, 302]);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain response properties as needed\", function () {",
	"    let jsonData = pm.response.json();",
	"",
	"    switch(_responseCode) {",
	"        case 201:",
	"            pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
	"            pm.expect(jsonData.revoked_tokens.length).not.equal(0);",
	"            break;",
	"        case 302:",
	"            pm.expect(jsonData).to.have.property(\"status\");",
	"            pm.expect(jsonData.status).to.eql('Record already exists!');",
	"            break;",
	"    }",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "24c67b02-8cfb-416f-8bb1-69aa5f6fe626",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 201 or 302\", function () {\n    pm.expect(_responseCode).to.be.oneOf([201, 302]);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n\n    switch(_responseCode) {\n        case 201:\n            pm.expect(jsonData).to.have.property(\"revoked_tokens\");\n            pm.expect(jsonData.revoked_tokens.length).not.equal(0);\n            break;\n        case 302:\n            pm.expect(jsonData).to.have.property(\"status\");\n            pm.expect(jsonData.status).to.eql('Record already exists!');\n            break;\n    }\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "5d65b3c4-6114-400c-b99d-766b20322880",
	"name": "Fail for No app id in ther request body Create Black List app ",
	"url": "{{host_consent}}/blacklist",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "dca3c364-4c37-44a5-9c28-2415950b5741",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without App Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "24c67b02-8cfb-416f-8bb1-69aa5f6fe626",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"developer_id\": \"384hfhf\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "69a9e8c2-500b-4348-aa1f-c5045252ef19",
	"name": "Fail to Generate OTP, App Blacklisted",
	"url": "{{host_auth}}/generate/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 403\", function () {",
	"    pm.response.to.have.status(403);",
	"});",
	"",
	"",
	"pm.test(\"Should contain Forbidden in error_code\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"Forbidden\");",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4be18333-7781-44a7-a839-cad5b490b311",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n\n\npm.test(\"Should contain Forbidden in error_code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"Forbidden\");\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"msisdn\" : \"09273164032\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4ac\",\n    \"blacklist\": true\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "73ebda34-5c70-4654-81ed-74ef75f74de3",
	"name": "Fail with invalid transaction ID Update Transaction with PATCH",
	"url": "{{host_auth}}/transaction/4545",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PATCH",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 200\", function () {",
	"    pm.response.to.have.status(200);",
	"});",
	"",
	"",
	"// pm.test(\"Should contain response properties as needed\", function () {",
	"//     let jsonData = pm.response.json();",
	"//     pm.expect(jsonData).to.have.property(\"transaction_id\");",
	"//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");",
	" ",
	"// });"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "645336af-855b-4caf-8a3c-7f479ed92897",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\n// pm.test(\"Should contain response properties as needed\", function () {\n//     let jsonData = pm.response.json();\n//     pm.expect(jsonData).to.have.property(\"transaction_id\");\n//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");\n \n// });",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"response_type\": \"sample_type2q\",\n  \"subscriber_id\": \"type21\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"asasa\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\",\n  \"status\": 0\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "7745dbf0-d5cb-4717-89bf-c9a62f5ee208",
	"name": "Fail without scopes Create a Consent",
	"url": "{{host_consent}}/consent?",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [
	{
	"key": "",
	"value": "",
	"enabled": false
	}
	],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without scopes\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without scopes\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "77f891e6-782f-4ce5-ae45-b515cd7ac68d",
	"name": "Successfully Generate TOTP",
	"url": "{{host_auth}}/generate/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"value": "application/json",
	"type": "text"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 201\", function () {",
	"    pm.response.to.have.status(201);",
	"});",
	"",
	"pm.environment.set(\"app_id\", pm.response.json().app_id);",
	"pm.environment.set(\"subscriber_id\", pm.response.json().subscriber_id);",
	"pm.environment.set(\"otp\", pm.response.json().otp);",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4be18333-7781-44a7-a839-cad5b490b311",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 201\", function () {\n    pm.response.to.have.status(201);\n});\n\npm.environment.set(\"app_id\", pm.response.json().app_id);\npm.environment.set(\"subscriber_id\", pm.response.json().subscriber_id);\npm.environment.set(\"otp\", pm.response.json().otp);\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"msisdn\" : \"{{sms_address}}\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": true,\n    \"transaction_id\": \"{{transaction_id}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "80d37733-58ca-45f4-8999-e57b506a4a45",
	"name": "Fail to Generate OTP, NO Blacklist",
	"url": "{{host_auth}}/generate/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should contain BadRequest in Error Code\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4be18333-7781-44a7-a839-cad5b490b311",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"msisdn\" : \"\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": \"\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "81334457-d212-46af-94a3-319db95bffe0",
	"name": "Set HOST Address to Local URL",
	"url": "{{dummy_api}}",
	"description": "",
	"data": null,
	"dataMode": null,
	"headerData": [],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "e9b36741-c9cc-458b-b941-3b0a21984804",
	"exec": [
	"pm.environment.set(\"host_auth\",\"http://localhost:3001/auth/v1\");",
	"pm.environment.set(\"host_consent\",\"http://localhost:3002/subscriber/v1\");"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": null,
	"preRequestScript": null,
	"tests": "pm.environment.set(\"host_auth\",\"http://localhost:3001/auth/v1\");\npm.environment.set(\"host_consent\",\"http://localhost:3002/subscriber/v1\");",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "",
	"pathVariables": []
	},
	{
	"id": "81f7345f-bc30-41c2-9b43-bd6706ea23d5",
	"name": "Successfully Get Transaction",
	"url": "{{host_auth}}/transaction/{{transaction_id}}",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 200\", function () {",
	"    pm.response.to.have.status(200);",
	"});",
	"",
	"",
	"pm.test(\"Should contain response properties as needed\", function () {",
	"    let jsonData = pm.response.json();",
	"    pm.expect(jsonData).to.have.property(\"response_type\");",
	"    pm.expect(jsonData.response_type).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"client_id\");",
	"    pm.expect(jsonData.client_id).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"redirect_uri\");",
	"    pm.expect(jsonData.redirect_uri).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"scopes\");",
	"    pm.expect(jsonData.scopes).to.be.a(\"array\");",
	"        pm.expect(jsonData).to.have.property(\"state\");",
	"    pm.expect(jsonData.state).to.be.a(\"string\");",
	"      pm.expect(jsonData).to.have.property(\"auth_state\");",
	"    pm.expect(jsonData.auth_state).to.be.a(\"number\");",
	"        pm.expect(jsonData).to.have.property(\"subscriber_id\");",
	"    pm.expect(jsonData.app_id).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"app_id\");",
	"    pm.expect(jsonData.app_id).to.be.a(\"string\");",
	"        pm.expect(jsonData).to.have.property(\"developer_id\");",
	"    pm.expect(jsonData.developer_id).to.be.a(\"string\");",
	" ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "97bd51a0-3227-46e3-9a1c-0ae228d9091a",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"response_type\");\n    pm.expect(jsonData.response_type).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"client_id\");\n    pm.expect(jsonData.client_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"redirect_uri\");\n    pm.expect(jsonData.redirect_uri).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"scopes\");\n    pm.expect(jsonData.scopes).to.be.a(\"array\");\n        pm.expect(jsonData).to.have.property(\"state\");\n    pm.expect(jsonData.state).to.be.a(\"string\");\n      pm.expect(jsonData).to.have.property(\"auth_state\");\n    pm.expect(jsonData.auth_state).to.be.a(\"number\");\n        pm.expect(jsonData).to.have.property(\"subscriber_id\");\n    pm.expect(jsonData.app_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"app_id\");\n    pm.expect(jsonData.app_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"developer_id\");\n    pm.expect(jsonData.developer_id).to.be.a(\"string\");\n \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "832bd611-5529-48e3-93f2-413c98ec40ba",
	"name": "Fail without scopes Update a Consent",
	"url": "{{host_consent}}/consent?",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [
	{
	"key": "",
	"value": "",
	"enabled": false
	}
	],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without scopes\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without scopes\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "934ef7b2-980d-4d21-a39f-588c4e00f0ca",
	"name": "Fail without Subscriber Id Revoke All Consent  ",
	"url": "{{host_consent}}/revoke/all",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without App Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "778ae5d8-2215-496e-a4a3-faa54b5d9943",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "9722405a-ad41-4f97-a1d8-862fe2786df5",
	"name": "Successfully Update Transaction with PATCH",
	"url": "{{host_auth}}/transaction/{{transaction_id}}",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PATCH",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 200\", function () {",
	"    pm.response.to.have.status(200);",
	"});",
	"",
	"",
	"// pm.test(\"Should contain response properties as needed\", function () {",
	"//     let jsonData = pm.response.json();",
	"//     pm.expect(jsonData).to.have.property(\"transaction_id\");",
	"//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");",
	" ",
	"// });"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "645336af-855b-4caf-8a3c-7f479ed92897",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\n// pm.test(\"Should contain response properties as needed\", function () {\n//     let jsonData = pm.response.json();\n//     pm.expect(jsonData).to.have.property(\"transaction_id\");\n//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");\n \n// });",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"response_type\": \"sample_type2q\",\n  \"subscriber_id\": \"type21\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"asasa\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\",\n  \"status\": 0\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "9845b3b0-83b8-41fa-9bb9-30f38d3d802f",
	"name": "Fail to Generate OTP, Account is blocked",
	"url": "{{host_auth}}/generate/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 403\", function () {",
	"    pm.response.to.have.status(403);",
	"});",
	"",
	"",
	"pm.test(\"Should Contain Unauthorized in error code\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"Unauthorized\");",
	"});",
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "prerequest",
	"script": {
	"id": "77a621a9-9252-47dc-9185-40a7ba6fe433",
	"exec": [
	"function verifyOtp() {",
	" pm.sendRequest({",
	"        url: pm.environment.get(\"host_auth\")+\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body : {",
	"            mode: 'raw',",
	"            raw : JSON.stringify({subscriber_id: \"{{subscriber_id}}\", app_id: app_id, otp:'123456'})",
	"        }",
	"    },function(err, response){",
	"        console.log(err);",
	"        console.log(response)",
	"    });",
	"}",
	"function generateOtp() {",
	"    pm.sendRequest({",
	"    url: pm.environment.get(\"host_auth\")+\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:\"9165974395\",app_id:'c8b37b4f08b02dac715e64cf162964f8',blacklist: true})",
	"    }",
	"}, function (err, response) {",
	"    console.log(response.json())",
	"    let {subscriber_id, app_id, otp}= response.json();",
	"})",
	"}",
	"",
	"function init(callback){",
	"    // for (let i=0; i<3; i++) {",
	"    //     verifyOtp();",
	"    // }",
	"    callback();",
	"}",
	"",
	"",
	"init(generateOtp);",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4be18333-7781-44a7-a839-cad5b490b311",
	"preRequestScript": "function verifyOtp() {\n pm.sendRequest({\n        url: pm.environment.get(\"host_auth\")+\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body : {\n            mode: 'raw',\n            raw : JSON.stringify({subscriber_id: \"{{subscriber_id}}\", app_id: app_id, otp:'123456'})\n        }\n    },function(err, response){\n        console.log(err);\n        console.log(response)\n    });\n}\nfunction generateOtp() {\n    pm.sendRequest({\n    url: pm.environment.get(\"host_auth\")+\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:\"9165974395\",app_id:'c8b37b4f08b02dac715e64cf162964f8',blacklist: true})\n    }\n}, function (err, response) {\n    console.log(response.json())\n    let {subscriber_id, app_id, otp}= response.json();\n})\n}\n\nfunction init(callback){\n    // for (let i=0; i<3; i++) {\n    //     verifyOtp();\n    // }\n    callback();\n}\n\n\ninit(generateOtp);\n",
	"tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n\n\npm.test(\"Should Contain Unauthorized in error code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"Unauthorized\");\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"msisdn\" : \"09273164032\",\n    \"app_id\" :\"c8b37b4f08b02dac715e64cf162964f8\",\n    \"blacklist\": true\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "987d3a24-3e17-4f07-941e-eb12f9a1fe0f",
	"name": "Send SMS",
	"url": "{{host_auth}}/test/sms",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
	"exec": [
	"pm.test(\"Status code is 200\", function () {",
	"    pm.response.to.have.status(200);",
	"});",
	"",
	"pm.environment.set(\"transaction_id\", pm.response.json().transaction_id);"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\npm.environment.set(\"transaction_id\", pm.response.json().transaction_id);",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"{{otp}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "9a28d26f-da89-4056-bad7-95715eb6dbcc",
	"name": "Verify User",
	"url": "{{host_auth}}/verify/user",
	"description": "",
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json",
	"description": "",
	"type": "text",
	"enabled": true
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [],
	"folder": "07883f09-8264-4d5e-9b26-8fbbb3b11cf6",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{ \"msisdn\" : \"+639952558861\" }",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "9b47ad89-40b7-40a0-82c3-eccfe8b125ce",
	"name": "Fail without subscriber id Get Subscriber Apps List",
	"url": "{{host_consent}}/app/search",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code should be 404\", function () {",
	"    pm.expect(_responseCode).to.eql(404);",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "6191e377-ba93-4f84-939c-b329bb4d7359",
	"preRequestScript": null,
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 404\", function () {\n    pm.expect(_responseCode).to.eql(404);\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "9ba63123-f2de-4369-9d1f-9050ec0ac980",
	"name": "Stage SMS API",
	"url": "http://ippdevapi.infoshiftinc.com/smsmessaging/v1/outbound/21588754/requests",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json",
	"type": "text"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": null,
	"folder": "b4609759-73cc-4090-b6ed-f66fba586b05",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n \"message\" : \"Test Message\",\n\"address\": \"{{sms_address}}\",\n\"passphrase\":\"kG9wDBYAV9\",\n\"app_id\":\"q4jo5fdyRb8tBgcnj5iR6gtEajK5fdze\",\n\"app_secret\":\"3e72fe93b25c2412bcf23bfcd484d7f43f996ac7f2fde206553b741703156eab\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "9c1bb85a-f642-4526-99b8-06e5aa92c1df",
	"name": "Successful Revoke a Consent",
	"url": "{{host_consent}}/revoke/{{subscriber_id}}",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code should be 201 or 403\", function () {",
	"    pm.expect(_responseCode).to.be.oneOf([201,403]);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain response properties as needed\", function () {",
	"    let jsonData = pm.response.json();",
	"   switch(_responseCode) {",
	"       case 201:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
	"                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); ",
	"                    break;",
	"       case 403:",
	"                    pm.expect(jsonData).to.have.property(\"status\");",
	"                    pm.expect(jsonData.status).to.eql(\"Forbidden\");",
	"       ",
	"   }    ",
	"    ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "73ae1f49-2286-4a39-9a4c-ada43b8cdc36",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 201 or 403\", function () {\n    pm.expect(_responseCode).to.be.oneOf([201,403]);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n   switch(_responseCode) {\n       case 201:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");\n                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); \n                    break;\n       case 403:\n                    pm.expect(jsonData).to.have.property(\"status\");\n                    pm.expect(jsonData.status).to.eql(\"Forbidden\");\n       \n   }    \n    \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"app_id\": \"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n  \"developer_id\": \"{{developer_id}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "a0f21e83-add7-4cb9-876c-0001d93e8876",
	"name": "Fail without App Id in Create a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without App Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "a191b473-55f2-462d-9a87-bc4966951f2e",
	"name": "Fail Verify TOTP, No App ID",
	"url": "{{host_auth}}/verify/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"app_id\": \"\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"123456\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "a239f3ef-b80c-40cb-96a6-e5e17b4db4c8",
	"name": "Fail for No subscriber id , Create Black List app ",
	"url": "{{host_consent}}/blacklist",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "dca3c364-4c37-44a5-9c28-2415950b5741",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without App Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "24c67b02-8cfb-416f-8bb1-69aa5f6fe626",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"app_id\": \"dfdfsds\",\n  \"developer_id\": \"384hfhf\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "a6ddb2c2-886f-492a-9313-27b7360b6c98",
	"name": "Fail without Subscriber Id Revoke a Consent ",
	"url": "{{host_consent}}/revoke",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
	"exec": [
	"pm.test(\"Status code is 404\", function () {",
	"    pm.response.to.have.status(404);",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "73ae1f49-2286-4a39-9a4c-ada43b8cdc36",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "pm.test(\"Status code is 404\", function () {\n    pm.response.to.have.status(404);\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"app_id\": \"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n  \"developer_id\": \"{{developer_id}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "ae3ab645-204a-4264-a661-643bc0e70baf",
	"name": "Success Check App is BlackListed",
	"url": "{{host_consent}}/blacklist/{{subscriber_id}}/{{app_id}}",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json",
	"enabled": false
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "49f97bba-5e31-43c1-8e81-981b2b0b59d7",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response, createBlacklist));",
	"}",
	"// update consent",
	"function updateConsent(err, response,cb ) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        })",
	"        },",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// create blacklist",
	"function createBlacklist() {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/blacklist\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id')",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);",
	"",
	"//  consent flow ready",
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "cba6f0a7-2eea-48e4-b94c-d79c71800791",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code should be 200\", function () {",
	"    pm.expect(_responseCode).to.eql(200);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain response (is_blacklisted) with boolean value\", function () {",
	"    let jsonData = pm.response.json();",
	"    pm.expect(jsonData).to.have.property(\"is_blacklisted\");",
	"    pm.expect(jsonData.is_blacklisted).to.be.a('boolean');",
	"         ",
	"    ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "e45f8853-3583-4979-97cf-c35130782fe5",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response, createBlacklist));\n}\n// update consent\nfunction updateConsent(err, response,cb ) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        })\n        },\n    }, (err, response) => cb(err, response));\n}\n// create blacklist\nfunction createBlacklist() {\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/blacklist\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id')\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);\n\n//  consent flow ready\n",
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 200\", function () {\n    pm.expect(_responseCode).to.eql(200);\n});\n\n//  \npm.test(\"Should contain response (is_blacklisted) with boolean value\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"is_blacklisted\");\n    pm.expect(jsonData.is_blacklisted).to.be.a('boolean');\n         \n    \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "//Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "b1df7262-49bc-4463-90f9-5d2c579d93df",
	"name": "Successful Revoke All",
	"url": "{{host_consent}}/revoke/all",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "92239682-dc89-4c69-82ad-eef4d837ce03",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "2ee33765-63ad-4f3e-9e92-7a899fcc455c",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code should be 200 or 403\", function () {",
	"    pm.expect(_responseCode).to.be.oneOf([200,403]);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain response properties as needed\", function () {",
	"    let jsonData = pm.response.json();",
	"   switch(_responseCode) {",
	"       case 200:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
	"                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); ",
	"                    break;",
	"       case 403:",
	"                    pm.expect(jsonData).to.have.property(\"status\");",
	"                    pm.expect(jsonData.status).to.eql(\"Forbidden\");",
	"       ",
	"   }    ",
	"    ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "778ae5d8-2215-496e-a4a3-faa54b5d9943",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 200 or 403\", function () {\n    pm.expect(_responseCode).to.be.oneOf([200,403]);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n   switch(_responseCode) {\n       case 200:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");\n                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); \n                    break;\n       case 403:\n                    pm.expect(jsonData).to.have.property(\"status\");\n                    pm.expect(jsonData.status).to.eql(\"Forbidden\");\n       \n   }    \n    \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"subscriber_id\": \"27ebb7307b843f2937373618d9cc5bd1\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "b38a71ef-10e8-4a05-843c-8d6a438a7212",
	"name": "Fail for No Access token or record found , Create Black List app",
	"url": "{{host_consent}}/blacklist",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "dca3c364-4c37-44a5-9c28-2415950b5741",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code should be 403\", function () {",
	"    pm.expect(_responseCode).to.eql(403);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain response properties as needed\", function () {",
	"    let jsonData = pm.response.json();",
	"    pm.expect(jsonData).to.have.property(\"status\");",
	"    pm.expect(jsonData.status).to.eql('Forbidden');",
	"         ",
	"    ",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "24c67b02-8cfb-416f-8bb1-69aa5f6fe626",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 403\", function () {\n    pm.expect(_responseCode).to.eql(403);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"status\");\n    pm.expect(jsonData.status).to.eql('Forbidden');\n         \n    \n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"app_id\": \"dfdfsds\",\n  \"developer_id\": \"384hfhf\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "b926d914-a62f-4297-bce8-a17727dbf0e2",
	"name": "Prod Env Generate Access Token SMS",
	"url": "https://developer.globelabs.com.ph/oauth/access_token?app_id=g57rF5a7b7u7oi58xec7oKudp5onFGKz&app_secret=35fa1a9283c9bef3bd930d231aa19390cfac1cb9ab9ad9226b2b9014d4e83743&code=ys5oAoEFq7yKzFb9AM8fBGLEgSnEeA7IdgyX6F7Mj8zsKEjgLHL4nagCRXAajFgyo8BtE898BhK7qGEUnozMeH9nL9bHLz4zqsGE5Lzs5R5rAha4ARbfodBaetq5idjb7agTBnLtKGAXEf9B598h9454xsKd4gesaoLBkHp6zpzHBbqMGUb59R6hzpojBtebAE9F7jnKACArjnbHbzjz4so5yR6FAjeBAILMLLnSXxARyfK7yGzFnAA5GFGkpbXs",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [
	{
	"key": "app_id",
	"value": "g57rF5a7b7u7oi58xec7oKudp5onFGKz",
	"equals": true
	},
	{
	"key": "app_secret",
	"value": "35fa1a9283c9bef3bd930d231aa19390cfac1cb9ab9ad9226b2b9014d4e83743",
	"equals": true
	},
	{
	"key": "code",
	"value": "ys5oAoEFq7yKzFb9AM8fBGLEgSnEeA7IdgyX6F7Mj8zsKEjgLHL4nagCRXAajFgyo8BtE898BhK7qGEUnozMeH9nL9bHLz4zqsGE5Lzs5R5rAha4ARbfodBaetq5idjb7agTBnLtKGAXEf9B598h9454xsKd4gesaoLBkHp6zpzHBbqMGUb59R6hzpojBtebAE9F7jnKACArjnbHbzjz4so5yR6FAjeBAILMLLnSXxARyfK7yGzFnAA5GFGkpbXs",
	"equals": true
	}
	],
	"auth": null,
	"events": null,
	"folder": "b4609759-73cc-4090-b6ed-f66fba586b05",
	"responses": [
	{
	"id": "a9973665-9fa0-41b6-861d-1a0b65bac727",
	"name": "Generate SMS Access Token",
	"status": "OK",
	"mime": "",
	"language": "json",
	"text": "{\n    \"access_token\": \"6GrMfC6kCiNE9CqGigDXcYxio8mznHWz4rGAWwdXv8w\",\n    \"subscriber_number\": \"9952558864\"\n}",
	"responseCode": {
	"code": 200,
	"name": "OK",
	"detail": ""
	},
	"requestObject": {
	"id": "679056f4-b49b-47e4-aa83-ed137f31b45b",
	"method": "POST",
	"headers": "",
	"dataMode": "raw",
	"data": "",
	"url": "https://developer.globelabs.com.ph/oauth/access_token?app_id=ERqeuxn59nuXkc8Mr6T5KGuyRR6ruaxL&app_secret=646b7d0f978e1967f82921aa2c36edde569d544d9485242a6edc7232aeb91f05&code=qCAzr8Auar4boUzEgBphe6eKpF6jnjzHLRK65uLen8aCRg7nKf9g4BoFerr8qUB476xSxdMMoFpxbgBF4j9youeAEG8CpKxzdFk8Ld6t7AzRgSroB9GSyoyoGhRdiAqK9naTyMXhR9BoASKdzaRSAjLnptRjx4rF6kEbKCK499RuoGb6MFp9MzMFy97pBSb9rGRUoK4b6FLn7E8fzBn5dCdeKdBunqn4xHp8eb5FAXg85h9d47nUEGrMRuoAeerC",
	"pathVariableData": [],
	"queryParams": [
	{
	"key": "app_id",
	"value": "ERqeuxn59nuXkc8Mr6T5KGuyRR6ruaxL",
	"equals": true
	},
	{
	"key": "app_secret",
	"value": "646b7d0f978e1967f82921aa2c36edde569d544d9485242a6edc7232aeb91f05",
	"equals": true
	},
	{
	"key": "code",
	"value": "qCAzr8Auar4boUzEgBphe6eKpF6jnjzHLRK65uLen8aCRg7nKf9g4BoFerr8qUB476xSxdMMoFpxbgBF4j9youeAEG8CpKxzdFk8Ld6t7AzRgSroB9GSyoyoGhRdiAqK9naTyMXhR9BoASKdzaRSAjLnptRjx4rF6kEbKCK499RuoGb6MFp9MzMFy97pBSb9rGRUoK4b6FLn7E8fzBn5dCdeKdBunqn4xHp8eb5FAXg85h9d47nUEGrMRuoAeerC",
	"equals": true
	}
	],
	"headerData": []
	},
	"headers": [
	{
	"key": "Cache-Control",
	"value": "max-age=0, private, must-revalidate"
	},
	{
	"key": "Content-Type",
	"value": "application/json; charset=utf-8"
	},
	{
	"key": "Date",
	"value": "Tue, 19 Mar 2019 11:05:27 GMT"
	},
	{
	"key": "ETag",
	"value": "\"0dfebb74b9d3edbf75fc59bca2f320e0\""
	},
	{
	"key": "Server",
	"value": "nginx/1.8.0"
	},
	{
	"key": "Status",
	"value": "200 OK"
	},
	{
	"key": "X-Rack-Cache",
	"value": "invalidate, pass"
	},
	{
	"key": "X-Request-Id",
	"value": "1e20541d1c4f7e1a8065eedf5a0376db"
	},
	{
	"key": "X-Runtime",
	"value": "0.120295"
	},
	{
	"key": "X-UA-Compatible",
	"value": "IE=Edge,chrome=1"
	},
	{
	"key": "Content-Length",
	"value": "95"
	},
	{
	"key": "Connection",
	"value": "keep-alive"
	}
	],
	"cookies": [],
	"request": "b926d914-a62f-4297-bce8-a17727dbf0e2",
	"collection": "7f219e20-67a9-4f01-9296-9dfe350654dd"
	}
	],
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "",
	"headers": "",
	"pathVariables": []
	},
	{
	"id": "bddb7045-a3a8-4781-90c6-48e86ed28d7f",
	"name": "Fail without Subscriber Id Get Consent App List",
	"url": "{{host_consent}}/consent/list",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "df1c7a15-8da0-4de3-83a1-428764608081",
	"exec": [
	"",
	"// fail cases",
	"pm.test(\"Status code should not be 200\", function () {",
	"    pm.expect(pm.response.code).not.equal(200);",
	"});",
	"// fail cases",
	"pm.test(\"Status code should be 404\", function () {",
	"    pm.expect(pm.response.code).to.eql(404);",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4b8d18fe-4eba-464c-a70a-635ffc11a890",
	"preRequestScript": null,
	"tests": "\n// fail cases\npm.test(\"Status code should not be 200\", function () {\n    pm.expect(pm.response.code).not.equal(200);\n});\n// fail cases\npm.test(\"Status code should be 404\", function () {\n    pm.expect(pm.response.code).to.eql(404);\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "bec54451-4d0c-4dd6-b0f4-8ede78be19dc",
	"name": "Fail without appname Update a Consent",
	"url": "{{host_consent}}/consent?",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [
	{
	"key": "",
	"value": "",
	"enabled": false
	}
	],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without appname\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without appname\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"1chei39ejifj\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ]\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "c55de865-f5d1-4575-857c-4be8b77573cb",
	"name": "Fail to verify, Account Blocked",
	"url": "{{host_auth}}/verify/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
	"exec": [
	"pm.test(\"Status code is 403\", function () {",
	"    pm.response.to.have.status(403);",
	"});",
	"",
	"pm.test(\"Should contain Unauthorized in response body\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql('Unauthorized');",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n\npm.test(\"Should contain Unauthorized in response body\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql('Unauthorized');\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"app_id\":\"c8b37b4f08b02dac715e64cf162964f8\",\n\t\"subscriber_id\":\"a2dbae3a1ba374ad7df6c02abcbaa033\",\n\t\"otp\": \"123456\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "c6d464b3-1680-492b-b302-b2a83cb13b31",
	"name": "Fail for Invalid Transaction ID Update a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "28c28f5c-2742-4cd7-be3e-b92b1f93ca07",
	"exec": [
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
	"    }",
	"}, function (err, response) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    }, function(err, response){",
	"         if (response.json().transaction_id){",
	"           setEnv('transaction_id', response.json().transaction_id);",
	"        }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, function(err, response){",
	"        console.log({err});",
	"    });",
	"    });",
	"});"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "609830bc-110d-48d8-aae0-bb1db5241bef",
	"exec": [
	"pm.test(\"Status code is 403\", function () {",
	"    pm.response.to.have.status(403);",
	"});",
	"",
	"",
	"pm.test(\"Should contain Transaction id is not valid in status\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.status).to.eql(\"Transaction id is not valid\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"preRequestScript": "let setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\npm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})\n    }\n}, function (err, response) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    }, function(err, response){\n         if (response.json().transaction_id){\n           setEnv('transaction_id', response.json().transaction_id);\n        }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, function(err, response){\n        console.log({err});\n    });\n    });\n});",
	"tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n\n\npm.test(\"Should contain Transaction id is not valid in status\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.status).to.eql(\"Transaction id is not valid\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n   \n    \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{$guid}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [\n    \"sms\",\n    \"location\",\n    \"sns\",\n    \"contacts\"\n  ],\n  \"appname\" : \"{{appname}}\",\n  \"access_token\": \"{{$guid}}\"\n}\n  \n  \n\n  \n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "cb87c51b-785f-4594-ab76-788bf18b06aa",
	"name": "Fail Verify TOTP, No OTP",
	"url": "{{host_auth}}/verify/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "d0a3c2e2-37db-47c6-a42d-0c5d0dc50315",
	"name": "Successfully Create a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"value": "application/json",
	"type": "text"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	"const uuid = require('uuid');",
	"function setEnv (key, value)  {",
	"    pm.environment.set(key, value);",
	"}",
	"",
	"function getEnv (key)  {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"setEnv('app_id', uuid.v4());",
	"setEnv('developer_id', uuid.v4());",
	"pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id:getEnv('app_id'),blacklist: true})",
	"    }",
	"}, function (err, response) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"    if (subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id);",
	"    }",
	"",
	"    console.log(getEnv('subscriber_id'), getEnv('app_id'));",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    }, function(err, response){",
	"        let {transaction_id} = response.json();",
	"        if(transaction_id) {",
	"            setEnv('transaction_id',transaction_id);",
	"        }",
	"        console.log(getEnv('subscriber_id'), getEnv('app_id'), getEnv('subscriber_id'));",
	"    });",
	"});",
	"",
	"",
	"",
	"",
	"    ",
	"",
	"",
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "470624d9-fb2a-4355-bbff-071a9ea3c500",
	"exec": [
	"let _responseCode = pm.response.code;",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code is 201 or 302 or 200\", function () {",
	"    pm.expect(_responseCode).to.be.oneOf([201,200,302]);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain response properties as needed\", function () {",
	"    let jsonData = pm.response.json();",
	"",
	"    switch(_responseCode) {",
	"        case 201: case 200:",
	"            pm.expect(jsonData).to.have.property(\"old_token\");",
	"            pm.expect(jsonData).to.have.property(\"old_token_value\");",
	"            pm.expect(jsonData.old_token).to.eql(false);",
	"            pm.expect(jsonData.old_token_value).to.eql(\"\");",
	"            break;",
	"        case 302:",
	"            pm.expect(jsonData).to.have.property(\"status\");",
	"            pm.expect(jsonData.status).to.eql('Record already Exists!');",
	"            break;",
	"            ",
	"    }",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "12bdd3f7-75b9-40bb-bc31-c381b0a06df5",
	"preRequestScript": "const uuid = require('uuid');\nfunction setEnv (key, value)  {\n    pm.environment.set(key, value);\n}\n\nfunction getEnv (key)  {\n    return pm.environment.get(key);\n}\n\nsetEnv('app_id', uuid.v4());\nsetEnv('developer_id', uuid.v4());\npm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id:getEnv('app_id'),blacklist: true})\n    }\n}, function (err, response) {\n    let {subscriber_id, app_id, otp} = response.json();\n    if (subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id);\n    }\n\n    console.log(getEnv('subscriber_id'), getEnv('app_id'));\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    }, function(err, response){\n        let {transaction_id} = response.json();\n        if(transaction_id) {\n            setEnv('transaction_id',transaction_id);\n        }\n        console.log(getEnv('subscriber_id'), getEnv('app_id'), getEnv('subscriber_id'));\n    });\n});\n\n\n\n\n    \n\n\n",
	"tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code is 201 or 302 or 200\", function () {\n    pm.expect(_responseCode).to.be.oneOf([201,200,302]);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n\n    switch(_responseCode) {\n        case 201: case 200:\n            pm.expect(jsonData).to.have.property(\"old_token\");\n            pm.expect(jsonData).to.have.property(\"old_token_value\");\n            pm.expect(jsonData.old_token).to.eql(false);\n            pm.expect(jsonData.old_token_value).to.eql(\"\");\n            break;\n        case 302:\n            pm.expect(jsonData).to.have.property(\"status\");\n            pm.expect(jsonData.status).to.eql('Record already Exists!');\n            break;\n            \n    }\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "d3a7bf5c-8198-4182-84bc-61af921e74a7",
	"name": "Fail without Developer Id in Update a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without Developer Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without Developer Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "d61cf24d-c712-4fde-b088-4d6b4ecea639",
	"name": "Fail Verify TOTP, No Subscriber ID",
	"url": "{{host_auth}}/verify/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"\",\n\t\"otp\": \"123456\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "d668f4e0-1443-4eaf-b2fb-0d3897b216e9",
	"name": "Fail without Subscriber Id in Update a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "83874ba4-e766-459e-8666-76f0fba8578f",
	"exec": [
	""
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without subscriber Id\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without subscriber Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "d6df182a-5f37-488e-aeed-86c3b1d6e6b1",
	"name": "Stage Env Generate Access Token SMS",
	"url": "http://ippweb.infoshiftinc.com/oauth/access_token?app_id=q4jo5fdyRb8tBgcnj5iR6gtEajK5fdze&app_secret=3e72fe93b25c2412bcf23bfcd484d7f43f996ac7f2fde206553b741703156eab&code=KK7s59qy8tqay6btn6e8AtL5GjyuyayqeF656q8u8arGnhqdnqGU87eKoU7KrRAsyAq9Kfq78rqfy4kbphzGEgES8dR8kF4XGLdh8pEKyHnxLoqsXA8abfgLyBqf4RTLkacyzefLn87dfXELG7saLEnMH68GdphzdREbFaKE5MSMqkBAhGL84dfxKqAxf89r8nsx7eboUEenbkUGEreXh5864puMRyLpFLzG7xuLXedytEryrjtB5q6ptEoKkMsE",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [
	{
	"key": "app_id",
	"value": "q4jo5fdyRb8tBgcnj5iR6gtEajK5fdze",
	"equals": true
	},
	{
	"key": "app_secret",
	"value": "3e72fe93b25c2412bcf23bfcd484d7f43f996ac7f2fde206553b741703156eab",
	"equals": true
	},
	{
	"key": "code",
	"value": "KK7s59qy8tqay6btn6e8AtL5GjyuyayqeF656q8u8arGnhqdnqGU87eKoU7KrRAsyAq9Kfq78rqfy4kbphzGEgES8dR8kF4XGLdh8pEKyHnxLoqsXA8abfgLyBqf4RTLkacyzefLn87dfXELG7saLEnMH68GdphzdREbFaKE5MSMqkBAhGL84dfxKqAxf89r8nsx7eboUEenbkUGEreXh5864puMRyLpFLzG7xuLXedytEryrjtB5q6ptEoKkMsE",
	"equals": true
	}
	],
	"auth": null,
	"events": null,
	"folder": "b4609759-73cc-4090-b6ed-f66fba586b05",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "",
	"headers": "",
	"pathVariables": []
	},
	{
	"id": "db3cc746-2de3-4a32-ae0b-39a898441984",
	"name": "Fail to Generate OTP, NO APP ID",
	"url": "{{host_auth}}/generate/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should contain BadRequest in Error Code\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4be18333-7781-44a7-a839-cad5b490b311",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"msisdn\" : \"09273164031\",\n    \"app_id\" :\"\",\n    \"blacklist\": true\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "e0cd3726-6b97-4b39-8b5c-0b08492c10e9",
	"name": "Successful Get Consent App List",
	"url": "{{host_consent}}/consent/{{subscriber_id}}/list",
	"description": null,
	"data": null,
	"dataMode": null,
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "e581ad09-9016-4085-93bd-fffcacb93e85",
	"exec": [
	"let jsonData = pm.response.json();",
	"//  susccess response",
	"pm.test(\"Status code should be 200\", function () {",
	"    pm.expect(pm.response.code).to.eql(200);",
	"});",
	"//  response body should contain following properties check",
	"pm.test(\"Response Body should contain response properties as needed\", function () {",
	"    pm.expect(jsonData).to.have.property(\"resultcount\");",
	"    pm.expect(jsonData).to.have.property(\"apps\");",
	"});",
	"",
	"if(jsonData.resultcount > 0){",
	"    //  for more than 0 resultcount check",
	"pm.test(\"Response Body apps should contain non empty array for resultcount > 0\", function () {",
	"    pm.expect(jsonData).to.have.property(\"page\");",
	"    pm.expect(jsonData).to.have.property(\"limit\");",
	"    pm.expect(jsonData.apps.length).to.be.above(0);",
	"});",
	"}",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "4b8d18fe-4eba-464c-a70a-635ffc11a890",
	"preRequestScript": null,
	"tests": "let jsonData = pm.response.json();\n//  susccess response\npm.test(\"Status code should be 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n//  response body should contain following properties check\npm.test(\"Response Body should contain response properties as needed\", function () {\n    pm.expect(jsonData).to.have.property(\"resultcount\");\n    pm.expect(jsonData).to.have.property(\"apps\");\n});\n\nif(jsonData.resultcount > 0){\n    //  for more than 0 resultcount check\npm.test(\"Response Body apps should contain non empty array for resultcount > 0\", function () {\n    pm.expect(jsonData).to.have.property(\"page\");\n    pm.expect(jsonData).to.have.property(\"limit\");\n    pm.expect(jsonData.apps.length).to.be.above(0);\n});\n}\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "e2072f93-b190-4909-9efa-461dc1830674",
	"name": "Fail with invalid transcation idUpdate Transaction",
	"url": "{{host_auth}}/transaction/03434",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"type": "text",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
	"exec": [
	"pm.test(\"Status code is 200\", function () {",
	"    pm.response.to.have.status(200);",
	"});",
	"",
	"",
	"// pm.test(\"Should contain response properties as needed\", function () {",
	"//     let jsonData = pm.response.json();",
	"//     pm.expect(jsonData).to.have.property(\"transaction_id\");",
	"//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");",
	" ",
	"// });"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "645336af-855b-4caf-8a3c-7f479ed92897",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\n// pm.test(\"Should contain response properties as needed\", function () {\n//     let jsonData = pm.response.json();\n//     pm.expect(jsonData).to.have.property(\"transaction_id\");\n//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");\n \n// });",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n  \"response_type\": \"sample_type2q\",\n  \"subscriber_id\": \"type21\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"asasa\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\",\n  \"status\": 0\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "e30eed6c-2054-4d34-903c-050278d2ffdb",
	"name": "Successful Update a Consent",
	"url": "{{host_consent}}/consent",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "28c28f5c-2742-4cd7-be3e-b92b1f93ca07",
	"exec": [
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
	"    }",
	"}, function (err, response) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"    if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    }, function(err, response){",
	"        if (response.json().transaction_id){",
	"          setEnv('transaction_id', response.json().transaction_id);",
	"        }",
	" ",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, function(err, response){",
	"        console.log({err});",
	"    });",
	"    });",
	"});"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "609830bc-110d-48d8-aae0-bb1db5241bef",
	"exec": [
	"",
	"/*  201 for Newly created Endpoint",
	"*   302 for existing record with same scope ",
	"*/",
	"pm.test(\"Status code is 200\", function () {",
	"    pm.expect(pm.response.code).to.eql(200);",
	"});",
	"",
	"//  ",
	"pm.test(\"Should contain properties old_token and old_token_value \", function () {",
	"    let jsonData = pm.response.json();",
	"    //  response has property old_token, old_token_value",
	"    pm.expect(jsonData).to.have.property(\"old_token\");",
	"    pm.expect(jsonData).to.have.property(\"old_token_value\");",
	"});",
	"",
	"",
	"pm.test(\"Should have resepective values for old_token and old_token_value\", function () {",
	"    let jsonData = pm.response.json();",
	"    //  check old_token property has only boolean",
	"    pm.expect(jsonData.old_token).to.be.oneOf([true, false]);",
	"    //  truthy value should have truthy  value",
	"    if (jsonData.old_token) {",
	"        pm.expect(jsonData.old_token_value).not.equal(\"\");",
	"    } else {",
	"        pm.expect(jsonData.old_token_value).to.eql(\"\");",
	"    }",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "46b14114-ce0b-46be-bba7-0ca0d0c9e52b",
	"preRequestScript": "let setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\npm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})\n    }\n}, function (err, response) {\n    let {subscriber_id, app_id, otp} = response.json();\n    if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    }, function(err, response){\n        if (response.json().transaction_id){\n          setEnv('transaction_id', response.json().transaction_id);\n        }\n \n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, function(err, response){\n        console.log({err});\n    });\n    });\n});",
	"tests": "\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\n//  \npm.test(\"Should contain properties old_token and old_token_value \", function () {\n    let jsonData = pm.response.json();\n    //  response has property old_token, old_token_value\n    pm.expect(jsonData).to.have.property(\"old_token\");\n    pm.expect(jsonData).to.have.property(\"old_token_value\");\n});\n\n\npm.test(\"Should have resepective values for old_token and old_token_value\", function () {\n    let jsonData = pm.response.json();\n    //  check old_token property has only boolean\n    pm.expect(jsonData.old_token).to.be.oneOf([true, false]);\n    //  truthy value should have truthy  value\n    if (jsonData.old_token) {\n        pm.expect(jsonData.old_token_value).not.equal(\"\");\n    } else {\n        pm.expect(jsonData.old_token_value).to.eql(\"\");\n    }\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n   \n    \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [\n    \"sms\",\n    \"location\",\n    \"sns\",\n    \"contacts\"\n  ],\n  \"appname\" : \"{{appname}}\",\n  \"access_token\": \"{{$guid}}\"\n}\n  \n  \n\n  \n",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "eee673ef-e517-40af-89cc-8d3e09ba47b0",
	"name": "Successfully Verify TOTP",
	"url": "{{host_auth}}/verify/totp",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"name": "Content-Type",
	"value": "application/json",
	"type": "text"
	}
	],
	"method": "POST",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
	"exec": [
	"pm.test(\"Status code is 200\", function () {",
	"    pm.response.to.have.status(200);",
	"});",
	""
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "bca39eba-b661-4dc7-b73a-6cf8ea8e3c6f",
	"preRequestScript": null,
	"tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"{{otp}}\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "f27e9b87-b3e1-425a-beb2-d293f48cdae7",
	"name": "Fail without Developer Id Revoke a Consent",
	"url": "{{host_consent}}/revoke/{{subscriber_id}}",
	"description": null,
	"data": [],
	"dataMode": "raw",
	"headerData": [
	{
	"key": "Content-Type",
	"value": "application/json"
	}
	],
	"method": "PUT",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "prerequest",
	"script": {
	"id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
	"exec": [
	"// get postman env",
	"let setEnv = (key, value) => {",
	"    pm.environment.set(key, value);",
	"};",
	"//  get postman env",
	"let getEnv = (key) => {",
	"    return pm.environment.get(key);",
	"}",
	"",
	"// generate otp",
	"function generateOtp(cb) {",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_auth\") +\"/generate/totp\",",
	"    method: 'POST',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
	"        getEnv('app_id'), blacklist: true})",
	"    }",
	"}, (err, response) => cb(err, response, createConsent) );",
	"}",
	"",
	"",
	"// verify otp",
	"function verifyOtp(err, response, cb) {",
	"    let {subscriber_id, app_id, otp} = response.json();",
	"      if(subscriber_id && app_id) {",
	"        setEnv('subscriber_id', subscriber_id);",
	"        setEnv('app_id', app_id); ",
	"    }",
	"    pm.sendRequest({",
	"        url: getEnv(\"host_auth\") +\"/verify/totp\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
	"        }",
	"    },(err, response) => cb(err, response, updateConsent));",
	"}",
	"// create consent",
	"function createConsent(err, response, cb) {",
	"   if(response.json().transaction_id) {",
	"         setEnv('transaction_id', response.json().transaction_id);",
	"    }",
	"        //  creating consent",
	"        pm.sendRequest({",
	"        url: getEnv(\"host_consent\") +\"/consent\",",
	"        method: 'POST',",
	"        header: {",
	"            'content-type': 'application/json'",
	"        },",
	"        body: {",
	"            mode: 'raw',",
	"            raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname')})",
	"        }",
	"    }, (err, response) => cb(err, response));",
	"}",
	"// update consent",
	"function updateConsent(err, response) {",
	"   ",
	"  ",
	"        //  creating consent",
	"    pm.sendRequest({",
	"    url: getEnv(\"host_consent\") +\"/consent\",",
	"    method: 'PUT',",
	"    header: {",
	"        'content-type': 'application/json'",
	"    },",
	"    body: {",
	"        mode: 'raw',",
	"        raw: JSON.stringify({ ",
	"        subscriber_id: getEnv('subscriber_id'),",
	"        transaction_id : getEnv('transaction_id'),",
	"        app_id: getEnv('app_id'),",
	"        developer_id: getEnv('developer_id'),",
	"        scopes: getEnv('scopes'),",
	"        appname : getEnv('appname'),",
	"        access_token: \"GGYYYSWwx\"",
	"        }),",
	"        }",
	"    });",
	"}",
	"//  consent flow ready",
	"",
	"//  call generate otp",
	"generateOtp(verifyOtp);"
	],
	"type": "text/javascript"
	}
	},
	{
	"listen": "test",
	"script": {
	"id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
	"exec": [
	"pm.test(\"Status code is 400\", function () {",
	"    pm.response.to.have.status(400);",
	"});",
	"",
	"",
	"pm.test(\"Should Be a badRequest without scopes\", function () {",
	"    var jsonData = pm.response.json();",
	"    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
	"});"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": "73ae1f49-2286-4a39-9a4c-ada43b8cdc36",
	"preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
	"tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without scopes\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"rawModeData": "{\n    \"app_id\": \"a46fa81d-9941-42c1-8b47-c8d57be4acc24\"\n}",
	"headers": "Content-Type: application/json\n",
	"pathVariables": []
	},
	{
	"id": "f8158d55-28b5-4287-84dd-eb6f0bb8cad4",
	"name": "Set HOST Address to Remote URL",
	"url": "{{dummy_api}}",
	"description": "",
	"data": null,
	"dataMode": null,
	"headerData": [],
	"method": "GET",
	"pathVariableData": [],
	"queryParams": [],
	"auth": null,
	"events": [
	{
	"listen": "test",
	"script": {
	"id": "01d5ea79-23d9-4b18-8d4a-32cd1ead11cc",
	"exec": [
	"pm.environment.set(\"host_auth\",\"http://13.232.77.36:3001/auth/v1\");",
	"pm.environment.set(\"host_consent\",\"http://13.232.77.36:3002/subscriber/v1\");"
	],
	"type": "text/javascript"
	}
	}
	],
	"folder": null,
	"preRequestScript": null,
	"tests": "pm.environment.set(\"host_auth\",\"http://13.232.77.36:3001/auth/v1\");\npm.environment.set(\"host_consent\",\"http://13.232.77.36:3002/subscriber/v1\");",
	"currentHelper": null,
	"helperAttributes": null,
	"collectionId": "7f219e20-67a9-4f01-9296-9dfe350654dd",
	"headers": "",
	"pathVariables": []
	}
	]
	}