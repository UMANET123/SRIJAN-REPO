{
  "id": "78b9faa1-1d16-4621-9eff-925b205944f2",
  "name": "Globe Wakanda Micro Services",
  "description": null,
  "auth": null,
  "events": [
    {
      "listen": "prerequest",
      "script": {
        "id": "c4f8b934-93fb-4962-8d17-227161a4b75c",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "f3b08939-90a4-48e7-8728-79b0543dc71c",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variables": [],
  "order": [
    "e4577c4d-1ce7-43e0-99c5-dc0e299c5c5a",
    "698acc81-c9e3-4815-8770-194dce55515b"
  ],
  "folders_order": [
    "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
    "0e8eaf97-5e56-4a47-ab8e-23227ee73954"
  ],
  "folders": [
    {
      "id": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "name": "Auth Micro Service",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": null,
      "order": [],
      "folders_order": [
        "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
        "3be36853-e2e8-4e90-bf88-5bd9a924c499",
        "889c0552-12e8-4280-9bd4-9e9f40e60165",
        "558c781e-6dcf-4fc1-a0d8-2f18443bf67b",
        "27a82277-3109-4795-b2e8-690492a7fa48",
        "b87469d2-b1bc-4433-aca1-577853322874",
        "ad4e7000-f91e-488c-bca6-247db5c54aad",
        "e1484585-734f-4c61-b122-b44238a2b31e"
      ],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2"
    },
    {
      "id": "865f7b91-916c-41ed-b5ac-fcbc6764f8be",
      "name": "Check App Is Blacklisted",
      "description": null,
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "14c6dbdc-7729-4b0f-9144-02798aa182d5",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "6a4ec977-77b6-47ee-8a0f-a5f4c329d966",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ],
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "order": [
        "f648c5ac-5ec2-4208-8c0a-a9b06e7453e6",
        "34df6a18-240f-46db-8fd1-a2f23b0870ff"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "865f7b91-916c-41ed-b5ac-fcbc6764f8be"
    },
    {
      "id": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "name": "Consent Micro Service",
      "description": "",
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": null,
      "order": [],
      "folders_order": [
        "a1e637cb-9992-47b2-be06-2d0e8c83af5b",
        "bece62c3-d3d9-4dd0-8400-b97d01c5a023",
        "07dc6efe-6b65-4b0e-b73d-b83e5a462e82",
        "6d426468-e456-4c85-af51-c3f903b74e2e",
        "f5981812-40df-4967-a6f2-67fde4013f73",
        "dc6e7de6-b81b-45da-b2cc-72b389068d0d",
        "865f7b91-916c-41ed-b5ac-fcbc6764f8be",
        "d8386523-1aba-4c9d-bfac-7b7e7de0e728"
      ],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "0e8eaf97-5e56-4a47-ab8e-23227ee73954"
    },
    {
      "id": "d8386523-1aba-4c9d-bfac-7b7e7de0e728",
      "name": "Create Blacklist",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "order": [
        "28ca6a44-1230-46e1-afed-269ec4f3c1a2",
        "06028d97-b6bf-468a-aad6-86ca70d9c04a",
        "39a2cffe-92f6-413f-9383-d9056ba58ab4",
        "4c39be6b-d71e-47c6-9c19-94711c7d3a0e",
        "732f218e-61f5-47d4-8756-886e2085e86d"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "d8386523-1aba-4c9d-bfac-7b7e7de0e728"
    },
    {
      "id": "6d426468-e456-4c85-af51-c3f903b74e2e",
      "name": "Create Consent",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "order": [
        "ca9f3b47-6d0b-423f-a89d-4a8749169f25",
        "6625d946-7e4c-4d21-9a68-1a69741b9f31",
        "580ac735-7048-498d-a3fc-6de518fab796",
        "ddd7b9d8-2821-47b8-8884-19df90a96d18",
        "66b81bd0-3e38-4d8b-8d68-1c3d1d42ecc6",
        "aefddb80-d559-443e-b184-81c823ab9833",
        "536a022d-dce6-4ede-8a99-6c92f18024c6"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "6d426468-e456-4c85-af51-c3f903b74e2e"
    },
    {
      "id": "ad4e7000-f91e-488c-bca6-247db5c54aad",
      "name": "Create Transaction",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "order": [
        "31035a83-b53f-4a26-bacb-920587e0fa2c"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "ad4e7000-f91e-488c-bca6-247db5c54aad"
    },
    {
      "id": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
      "name": "Generate TOTP",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "order": [
        "ccc6f266-f237-49c4-b1eb-a0f47a822458",
        "a063b353-6be1-4bc0-9b92-cd359c3cfa48",
        "9c2b9746-e19a-418f-a72e-67ff302e78ab",
        "f59beb01-f688-482d-89a9-88107844e02a",
        "01b1ddb3-350e-42f1-b8e6-e4b66d55437d",
        "34dcc504-56a1-470e-9f4a-6b38d7d92c9d",
        "f20ad259-37c8-4fc5-ba59-ab66011c479b"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65"
    },
    {
      "id": "07dc6efe-6b65-4b0e-b73d-b83e5a462e82",
      "name": "Get ConsentList",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "order": [
        "1214cf6d-f579-41f2-a633-04dbcd683d29",
        "94f150ad-7fe0-4367-bf31-8a7e2a7c6231"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "07dc6efe-6b65-4b0e-b73d-b83e5a462e82"
    },
    {
      "id": "bece62c3-d3d9-4dd0-8400-b97d01c5a023",
      "name": "Get Subscriber Apps",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "order": [
        "fc641f60-91b4-46cb-92bf-659f8b363798",
        "50de782b-eeb8-4af7-ba37-96ab0698a504",
        "5ab69779-7d04-44dc-8507-9996c78b3d68"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "bece62c3-d3d9-4dd0-8400-b97d01c5a023"
    },
    {
      "id": "b87469d2-b1bc-4433-aca1-577853322874",
      "name": "Get Transaction",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "order": [
        "e2c1f845-181f-4da9-a231-f03b07e9b646",
        "ba15bf65-0126-46b5-8b21-2c5abd091cd9",
        "5bc4506f-72e4-4d20-be63-5f64ea335c80"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "b87469d2-b1bc-4433-aca1-577853322874"
    },
    {
      "id": "558c781e-6dcf-4fc1-a0d8-2f18443bf67b",
      "name": "Invalidate Transaction",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "order": [
        "818cffae-4128-46d7-bc9f-8091a41930fb"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "558c781e-6dcf-4fc1-a0d8-2f18443bf67b"
    },
    {
      "id": "a1e637cb-9992-47b2-be06-2d0e8c83af5b",
      "name": "Revoke All App Consent",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "order": [
        "369a762e-cb1f-4e8a-ab25-42233e4368b2",
        "a4f08bad-7505-4f53-a4ee-21b8447ac710"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "a1e637cb-9992-47b2-be06-2d0e8c83af5b"
    },
    {
      "id": "dc6e7de6-b81b-45da-b2cc-72b389068d0d",
      "name": "Revoke App Consent",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "order": [
        "13288bd4-a6d8-4992-be81-f00ce8d8a8b6",
        "7ef9600a-df4b-4f19-bfaf-2a8ef8f90972",
        "9eb526df-2ace-4d80-9268-7bf7c8bbe90b",
        "6c639261-4eef-4f96-8759-2b437eb390ba"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "dc6e7de6-b81b-45da-b2cc-72b389068d0d"
    },
    {
      "id": "27a82277-3109-4795-b2e8-690492a7fa48",
      "name": "Sms Api Checking",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "order": [
        "a7a82407-4245-42cd-b9e1-b4866f5aa571",
        "ab914a89-9ead-41bd-9f3f-226489816aec",
        "2578d3b1-d58a-4a61-820c-eebdd97e93c7"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "27a82277-3109-4795-b2e8-690492a7fa48"
    },
    {
      "id": "f5981812-40df-4967-a6f2-67fde4013f73",
      "name": "Update Consent",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "0e8eaf97-5e56-4a47-ab8e-23227ee73954",
      "order": [
        "d339ae38-a10c-4107-8d9e-0712a1c31ae9",
        "4bb2b5c7-5163-4a60-bab1-bac4fbe32c11",
        "68ec1bbc-2b26-4c93-aec1-ea427e666398",
        "8856f327-05b1-4ed1-bced-7d7a196f1506",
        "91dcd1af-e702-4559-bc7a-32a3d0b3fd1b",
        "b22bb7a5-044d-40b4-9ddc-d222f9740aed",
        "26e8e12c-16c9-476a-abcc-7a8e6b6ae5ea"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "f5981812-40df-4967-a6f2-67fde4013f73"
    },
    {
      "id": "e1484585-734f-4c61-b122-b44238a2b31e",
      "name": "Update Transaction",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "order": [
        "b3f6cc57-651d-4cb0-97c7-76dceab63beb",
        "22137b5a-dab6-41a6-b24f-419fd8b6039c",
        "d0ae1465-a608-4f2c-8b39-5336a7c6317f",
        "92b9d07a-6b16-45a9-8199-f501e93471e6"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "e1484585-734f-4c61-b122-b44238a2b31e"
    },
    {
      "id": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "name": "Verify TOTP",
      "description": null,
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "order": [
        "cb57ba0e-0ceb-45b5-ae9e-9ca13d6f1b62",
        "e8262d54-949b-41fe-82ed-d20e48c33dd2",
        "333dad95-bea7-4bbc-9a23-a33c40bd719d",
        "1c18cfbf-c6f7-41dd-86c9-1ed1c01f8919",
        "b46b21d9-4164-4710-a73d-7ff6752a1d92",
        "383fc02d-20b6-4410-82fd-b4a9813b4c2a",
        "ba82795b-9b2b-49f4-ba8f-6266d05aa826",
        "34b129b7-06a5-48e9-bdd8-89756cff7b58"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "3be36853-e2e8-4e90-bf88-5bd9a924c499"
    },
    {
      "id": "889c0552-12e8-4280-9bd4-9e9f40e60165",
      "name": "Verify User",
      "description": "",
      "auth": null,
      "events": null,
      "collection": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folder": "860af4d0-72b3-49c7-b4a9-88eaa385d2b2",
      "order": [
        "54b2ccf4-0558-4853-9675-e617645b75b1"
      ],
      "folders_order": [],
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "folderId": "889c0552-12e8-4280-9bd4-9e9f40e60165"
    }
  ],
  "requests": [
    {
      "id": "01b1ddb3-350e-42f1-b8e6-e4b66d55437d",
      "name": "Fail to Generate OTP, NO Blacklist",
      "url": "{{host_auth}}/generate/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should contain BadRequest in Error Code\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"msisdn\" : \"\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": \"\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "06028d97-b6bf-468a-aad6-86ca70d9c04a",
      "name": "Fail for No Access token or record found , Create Black List app",
      "url": "{{host_consent}}/blacklist",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "dca3c364-4c37-44a5-9c28-2415950b5741",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code should be 403\", function () {",
              "    pm.expect(_responseCode).to.eql(403);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain response properties as needed\", function () {",
              "    let jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property(\"status\");",
              "    pm.expect(jsonData.status).to.eql('Forbidden');",
              "         ",
              "    ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "d8386523-1aba-4c9d-bfac-7b7e7de0e728",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 403\", function () {\n    pm.expect(_responseCode).to.eql(403);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"status\");\n    pm.expect(jsonData.status).to.eql('Forbidden');\n         \n    \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"app_id\": \"dfdfsds\",\n  \"developer_id\": \"384hfhf\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "1214cf6d-f579-41f2-a633-04dbcd683d29",
      "name": "Successful Get Consent App List",
      "url": "{{host_consent}}/consent/{{subscriber_id}}/list",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "e581ad09-9016-4085-93bd-fffcacb93e85",
            "exec": [
              "let jsonData = pm.response.json();",
              "//  susccess response",
              "pm.test(\"Status code should be 200\", function () {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "//  response body should contain following properties check",
              "pm.test(\"Response Body should contain response properties as needed\", function () {",
              "    pm.expect(jsonData).to.have.property(\"resultcount\");",
              "    pm.expect(jsonData).to.have.property(\"apps\");",
              "});",
              "",
              "if(jsonData.resultcount > 0){",
              "    //  for more than 0 resultcount check",
              "pm.test(\"Response Body apps should contain non empty array for resultcount > 0\", function () {",
              "    pm.expect(jsonData).to.have.property(\"page\");",
              "    pm.expect(jsonData).to.have.property(\"limit\");",
              "    pm.expect(jsonData.apps.length).to.be.above(0);",
              "});",
              "}",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "07dc6efe-6b65-4b0e-b73d-b83e5a462e82",
      "preRequestScript": null,
      "tests": "let jsonData = pm.response.json();\n//  susccess response\npm.test(\"Status code should be 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n//  response body should contain following properties check\npm.test(\"Response Body should contain response properties as needed\", function () {\n    pm.expect(jsonData).to.have.property(\"resultcount\");\n    pm.expect(jsonData).to.have.property(\"apps\");\n});\n\nif(jsonData.resultcount > 0){\n    //  for more than 0 resultcount check\npm.test(\"Response Body apps should contain non empty array for resultcount > 0\", function () {\n    pm.expect(jsonData).to.have.property(\"page\");\n    pm.expect(jsonData).to.have.property(\"limit\");\n    pm.expect(jsonData.apps.length).to.be.above(0);\n});\n}\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "13288bd4-a6d8-4992-be81-f00ce8d8a8b6",
      "name": "Successful Revoke a Consent",
      "url": "{{host_consent}}/revoke/{{subscriber_id}}",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code should be 201 or 403\", function () {",
              "    pm.expect(_responseCode).to.be.oneOf([201,403]);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain response properties as needed\", function () {",
              "    let jsonData = pm.response.json();",
              "   switch(_responseCode) {",
              "       case 201:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
              "                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); ",
              "                    break;",
              "       case 403:",
              "                    pm.expect(jsonData).to.have.property(\"status\");",
              "                    pm.expect(jsonData.status).to.eql(\"Forbidden\");",
              "       ",
              "   }    ",
              "    ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dc6e7de6-b81b-45da-b2cc-72b389068d0d",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 201 or 403\", function () {\n    pm.expect(_responseCode).to.be.oneOf([201,403]);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n   switch(_responseCode) {\n       case 201:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");\n                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); \n                    break;\n       case 403:\n                    pm.expect(jsonData).to.have.property(\"status\");\n                    pm.expect(jsonData.status).to.eql(\"Forbidden\");\n       \n   }    \n    \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"app_id\": \"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n  \"developer_id\": \"{{developer_id}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "1c18cfbf-c6f7-41dd-86c9-1ed1c01f8919",
      "name": "Fail Verify TOTP, No App ID",
      "url": "{{host_auth}}/verify/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"app_id\": \"\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"123456\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "22137b5a-dab6-41a6-b24f-419fd8b6039c",
      "name": "Fail with invalid transcation idUpdate Transaction",
      "url": "{{host_auth}}/transaction/03434",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "// pm.test(\"Should contain response properties as needed\", function () {",
              "//     let jsonData = pm.response.json();",
              "//     pm.expect(jsonData).to.have.property(\"transaction_id\");",
              "//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");",
              " ",
              "// });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "e1484585-734f-4c61-b122-b44238a2b31e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\n// pm.test(\"Should contain response properties as needed\", function () {\n//     let jsonData = pm.response.json();\n//     pm.expect(jsonData).to.have.property(\"transaction_id\");\n//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");\n \n// });",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"response_type\": \"sample_type2q\",\n  \"subscriber_id\": \"type21\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"asasa\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\",\n  \"status\": 0\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "2578d3b1-d58a-4a61-820c-eebdd97e93c7",
      "name": "Stage SMS API",
      "url": "http://ippdevapi.infoshiftinc.com/smsmessaging/v1/outbound/21588754/requests",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json",
          "type": "text"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": null,
      "folder": "27a82277-3109-4795-b2e8-690492a7fa48",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n \"message\" : \"Test Message\",\n\"address\": \"{{sms_address}}\",\n\"passphrase\":\"kG9wDBYAV9\",\n\"app_id\":\"q4jo5fdyRb8tBgcnj5iR6gtEajK5fdze\",\n\"app_secret\":\"3e72fe93b25c2412bcf23bfcd484d7f43f996ac7f2fde206553b741703156eab\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "26e8e12c-16c9-476a-abcc-7a8e6b6ae5ea",
      "name": "Fail without Developer Id in Update a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without Developer Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "f5981812-40df-4967-a6f2-67fde4013f73",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without Developer Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "28ca6a44-1230-46e1-afed-269ec4f3c1a2",
      "name": "Successfully Create Black List app",
      "url": "{{host_consent}}/blacklist",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "dca3c364-4c37-44a5-9c28-2415950b5741",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code should be 201 or 302\", function () {",
              "    pm.expect(_responseCode).to.be.oneOf([201, 302]);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain response properties as needed\", function () {",
              "    let jsonData = pm.response.json();",
              "",
              "    switch(_responseCode) {",
              "        case 201:",
              "            pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
              "            pm.expect(jsonData.revoked_tokens.length).not.equal(0);",
              "            break;",
              "        case 302:",
              "            pm.expect(jsonData).to.have.property(\"status\");",
              "            pm.expect(jsonData.status).to.eql('Record already exists!');",
              "            break;",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "d8386523-1aba-4c9d-bfac-7b7e7de0e728",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 201 or 302\", function () {\n    pm.expect(_responseCode).to.be.oneOf([201, 302]);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n\n    switch(_responseCode) {\n        case 201:\n            pm.expect(jsonData).to.have.property(\"revoked_tokens\");\n            pm.expect(jsonData.revoked_tokens.length).not.equal(0);\n            break;\n        case 302:\n            pm.expect(jsonData).to.have.property(\"status\");\n            pm.expect(jsonData.status).to.eql('Record already exists!');\n            break;\n    }\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "31035a83-b53f-4a26-bacb-920587e0fa2c",
      "name": "Successfully Create Transaction",
      "url": "{{host_auth}}/transaction",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "value": "application/json",
          "type": "text"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "",
              "pm.environment.set(\"transaction_id\", pm.response.json().transaction_id);",
              "pm.test(\"Should contain response properties as needed\", function () {",
              "    let jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property(\"transaction_id\");",
              "    pm.expect(jsonData.transaction_id).to.be.a(\"string\");",
              " ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "ad4e7000-f91e-488c-bca6-247db5c54aad",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 201\", function () {\n    pm.response.to.have.status(201);\n});\n\n\npm.environment.set(\"transaction_id\", pm.response.json().transaction_id);\npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"transaction_id\");\n    pm.expect(jsonData.transaction_id).to.be.a(\"string\");\n \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"response_type\": \"sample_type\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"scope2\",\n    \"scope3\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "333dad95-bea7-4bbc-9a23-a33c40bd719d",
      "name": "Fail Verify TOTP, OTP wrong",
      "url": "{{remote_host}}/verify/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
            "exec": [
              "pm.test(\"Status code is 403\", function () {",
              "    pm.response.to.have.status(403);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"123456\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "34b129b7-06a5-48e9-bdd8-89756cff7b58",
      "name": "Fail to verify, Account Blocked",
      "url": "{{host_auth}}/verify/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
            "exec": [
              "pm.test(\"Status code is 403\", function () {",
              "    pm.response.to.have.status(403);",
              "});",
              "",
              "pm.test(\"Should contain Unauthorized in response body\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql('Unauthorized');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n\npm.test(\"Should contain Unauthorized in response body\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql('Unauthorized');\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"app_id\":\"c8b37b4f08b02dac715e64cf162964f8\",\n\t\"subscriber_id\":\"a2dbae3a1ba374ad7df6c02abcbaa033\",\n\t\"otp\": \"123456\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "34dcc504-56a1-470e-9f4a-6b38d7d92c9d",
      "name": "Fail to Generate OTP, App Blacklisted",
      "url": "{{host_auth}}/generate/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 403\", function () {",
              "    pm.response.to.have.status(403);",
              "});",
              "",
              "",
              "pm.test(\"Should contain Forbidden in error_code\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"Forbidden\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n\n\npm.test(\"Should contain Forbidden in error_code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"Forbidden\");\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"msisdn\" : \"09273164032\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4ac\",\n    \"blacklist\": true\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "34df6a18-240f-46db-8fd1-a2f23b0870ff",
      "name": "Fail 404 With an invalid record, Check App is BlackListed",
      "url": "{{host_consent}}/blacklist/{{subscriber_id}}",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json",
          "enabled": false
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "49f97bba-5e31-43c1-8e81-981b2b0b59d7",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response, createBlacklist));",
              "}",
              "// update consent",
              "function updateConsent(err, response,cb ) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        })",
              "        },",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// create blacklist",
              "function createBlacklist() {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/blacklist\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id')",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);",
              "",
              "//  consent flow ready",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "cba6f0a7-2eea-48e4-b94c-d79c71800791",
            "exec": [
              "pm.test(\"Status code should be 404\", function () {",
              "    pm.expect(pm.response.code).to.eql(404);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "865f7b91-916c-41ed-b5ac-fcbc6764f8be",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response, createBlacklist));\n}\n// update consent\nfunction updateConsent(err, response,cb ) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        })\n        },\n    }, (err, response) => cb(err, response));\n}\n// create blacklist\nfunction createBlacklist() {\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/blacklist\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id')\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);\n\n//  consent flow ready\n",
      "tests": "pm.test(\"Status code should be 404\", function () {\n    pm.expect(pm.response.code).to.eql(404);\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "//Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "369a762e-cb1f-4e8a-ab25-42233e4368b2",
      "name": "Successful Revoke All",
      "url": "{{host_consent}}/revoke/all",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "92239682-dc89-4c69-82ad-eef4d837ce03",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "2ee33765-63ad-4f3e-9e92-7a899fcc455c",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code should be 200 or 403\", function () {",
              "    pm.expect(_responseCode).to.be.oneOf([200,403]);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain response properties as needed\", function () {",
              "    let jsonData = pm.response.json();",
              "   switch(_responseCode) {",
              "       case 200:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");",
              "                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); ",
              "                    break;",
              "       case 403:",
              "                    pm.expect(jsonData).to.have.property(\"status\");",
              "                    pm.expect(jsonData.status).to.eql(\"Forbidden\");",
              "       ",
              "   }    ",
              "    ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "a1e637cb-9992-47b2-be06-2d0e8c83af5b",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 200 or 403\", function () {\n    pm.expect(_responseCode).to.be.oneOf([200,403]);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n   switch(_responseCode) {\n       case 200:    pm.expect(jsonData).to.have.property(\"revoked_tokens\");\n                    pm.expect(jsonData.revoked_tokens).to.be.a(\"array\"); \n                    break;\n       case 403:\n                    pm.expect(jsonData).to.have.property(\"status\");\n                    pm.expect(jsonData.status).to.eql(\"Forbidden\");\n       \n   }    \n    \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"subscriber_id\": \"27ebb7307b843f2937373618d9cc5bd1\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "383fc02d-20b6-4410-82fd-b4a9813b4c2a",
      "name": "Fail Verify TOTP, No Subscriber ID",
      "url": "{{host_auth}}/verify/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"\",\n\t\"otp\": \"123456\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "39a2cffe-92f6-413f-9383-d9056ba58ab4",
      "name": "Fail for No subscriber id , Create Black List app ",
      "url": "{{host_consent}}/blacklist",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "dca3c364-4c37-44a5-9c28-2415950b5741",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without App Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "d8386523-1aba-4c9d-bfac-7b7e7de0e728",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"app_id\": \"dfdfsds\",\n  \"developer_id\": \"384hfhf\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "4bb2b5c7-5163-4a60-bab1-bac4fbe32c11",
      "name": "Fail for Invalid Transaction ID Update a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "28c28f5c-2742-4cd7-be3e-b92b1f93ca07",
            "exec": [
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
              "    }",
              "}, function (err, response) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    }, function(err, response){",
              "         if (response.json().transaction_id){",
              "           setEnv('transaction_id', response.json().transaction_id);",
              "        }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, function(err, response){",
              "        console.log({err});",
              "    });",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "609830bc-110d-48d8-aae0-bb1db5241bef",
            "exec": [
              "pm.test(\"Status code is 403\", function () {",
              "    pm.response.to.have.status(403);",
              "});",
              "",
              "",
              "pm.test(\"Should contain Transaction id is not valid in status\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql(\"Transaction id is not valid\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "f5981812-40df-4967-a6f2-67fde4013f73",
      "preRequestScript": "let setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\npm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})\n    }\n}, function (err, response) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    }, function(err, response){\n         if (response.json().transaction_id){\n           setEnv('transaction_id', response.json().transaction_id);\n        }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, function(err, response){\n        console.log({err});\n    });\n    });\n});",
      "tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n\n\npm.test(\"Should contain Transaction id is not valid in status\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.status).to.eql(\"Transaction id is not valid\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n   \n    \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{$guid}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [\n    \"sms\",\n    \"location\",\n    \"sns\",\n    \"contacts\"\n  ],\n  \"appname\" : \"{{appname}}\",\n  \"access_token\": \"{{$guid}}\"\n}\n  \n  \n\n  \n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "4c39be6b-d71e-47c6-9c19-94711c7d3a0e",
      "name": "Fail for No app id in ther request body Create Black List app ",
      "url": "{{host_consent}}/blacklist",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "dca3c364-4c37-44a5-9c28-2415950b5741",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without App Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "d8386523-1aba-4c9d-bfac-7b7e7de0e728",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"developer_id\": \"384hfhf\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "50de782b-eeb8-4af7-ba37-96ab0698a504",
      "name": "Successful for invalid subscriber id Get Subscriber Apps List",
      "url": "{{host_consent}}/app/search/17383",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code should be 200\", function () {",
              "    pm.expect(_responseCode).to.eql(200);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain response (appname) with array of no values\", function () {",
              "    let jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property(\"appname\");",
              "    pm.expect(jsonData.appname).to.be.a('array');",
              "    pm.expect(jsonData.appname.length).to.eql(0);     ",
              "    ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "bece62c3-d3d9-4dd0-8400-b97d01c5a023",
      "preRequestScript": null,
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 200\", function () {\n    pm.expect(_responseCode).to.eql(200);\n});\n\n//  \npm.test(\"Should contain response (appname) with array of no values\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"appname\");\n    pm.expect(jsonData.appname).to.be.a('array');\n    pm.expect(jsonData.appname.length).to.eql(0);     \n    \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "536a022d-dce6-4ede-8a99-6c92f18024c6",
      "name": "Fail without Developer Id in Create a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without Developer Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "6d426468-e456-4c85-af51-c3f903b74e2e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without Developer Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "54b2ccf4-0558-4853-9675-e617645b75b1",
      "name": "Verify User",
      "url": "{{host_auth}}/verify/user",
      "description": "",
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json",
          "description": "",
          "type": "text",
          "enabled": true
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [],
      "folder": "889c0552-12e8-4280-9bd4-9e9f40e60165",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{ \"msisdn\" : \"+639952558861\" }",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "580ac735-7048-498d-a3fc-6de518fab796",
      "name": "Fail without scopes Create a Consent",
      "url": "{{host_consent}}/consent?",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [
        {
          "key": "",
          "value": "",
          "enabled": false
        }
      ],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without scopes\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "6d426468-e456-4c85-af51-c3f903b74e2e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without scopes\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "5ab69779-7d04-44dc-8507-9996c78b3d68",
      "name": "Fail without subscriber id Get Subscriber Apps List",
      "url": "{{host_consent}}/app/search",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code should be 404\", function () {",
              "    pm.expect(_responseCode).to.eql(404);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "bece62c3-d3d9-4dd0-8400-b97d01c5a023",
      "preRequestScript": null,
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 404\", function () {\n    pm.expect(_responseCode).to.eql(404);\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "5bc4506f-72e4-4d20-be63-5f64ea335c80",
      "name": "Fail Get Transaction without transaction ID",
      "url": "{{host_auth}}/transaction",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "b87469d2-b1bc-4433-aca1-577853322874",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 404\", function () {\n    pm.response.to.have.status(404);\n});\n\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "6625d946-7e4c-4d21-9a68-1a69741b9f31",
      "name": "Successfully Create or Update Consent For different scopes",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
              "    }",
              "}, function (err, response) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "     if (subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id);",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    }, function(err, response){",
              "        if(response.json().transaction_id) {",
              "            setEnv('transaction_id', response.json().transaction_id);",
              "        }",
              "       ",
              "        console.log(getEnv('transaction_id'));",
              "            pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ subscriber_id: getEnv('subscriber_id'),",
              "    transaction_id : getEnv('transaction_id'),",
              "    app_id: getEnv('app_id'),",
              "  developer_id: getEnv('developer_id'),",
              "  scopes: [ \"sms\", \"location\" ],",
              "  appname : getEnv('appname')})",
              "        }",
              "    }, function(err, response){",
              "        console.log({err});",
              "    });",
              "    });",
              "});",
              "",
              "",
              "",
              "",
              "    ",
              "",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "470624d9-fb2a-4355-bbff-071a9ea3c500",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.expect(_responseCode).to.eql(200);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain falsy / null old token in response\", function () {",
              "    let jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property(\"old_token\");",
              "    pm.expect(jsonData).to.have.property(\"old_token_value\");",
              "    pm.expect(jsonData.old_token).to.eql(false);",
              "    pm.expect(jsonData.old_token_value).to.eql(\"\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "6d426468-e456-4c85-af51-c3f903b74e2e",
      "preRequestScript": "let setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\npm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})\n    }\n}, function (err, response) {\n    let {subscriber_id, app_id, otp} = response.json();\n     if (subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id);\n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    }, function(err, response){\n        if(response.json().transaction_id) {\n            setEnv('transaction_id', response.json().transaction_id);\n        }\n       \n        console.log(getEnv('transaction_id'));\n            pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ subscriber_id: getEnv('subscriber_id'),\n    transaction_id : getEnv('transaction_id'),\n    app_id: getEnv('app_id'),\n  developer_id: getEnv('developer_id'),\n  scopes: [ \"sms\", \"location\" ],\n  appname : getEnv('appname')})\n        }\n    }, function(err, response){\n        console.log({err});\n    });\n    });\n});\n\n\n\n\n    \n\n\n",
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code is 200\", function () {\n    pm.expect(_responseCode).to.eql(200);\n});\n\n//  \npm.test(\"Should contain falsy / null old token in response\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"old_token\");\n    pm.expect(jsonData).to.have.property(\"old_token_value\");\n    pm.expect(jsonData.old_token).to.eql(false);\n    pm.expect(jsonData.old_token_value).to.eql(\"\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\", \"contacts\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "66b81bd0-3e38-4d8b-8d68-1c3d1d42ecc6",
      "name": "Fail without Subscriber Id in Create a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without subscriber Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "6d426468-e456-4c85-af51-c3f903b74e2e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without subscriber Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "68ec1bbc-2b26-4c93-aec1-ea427e666398",
      "name": "Fail without scopes Update a Consent",
      "url": "{{host_consent}}/consent?",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [
        {
          "key": "",
          "value": "",
          "enabled": false
        }
      ],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without scopes\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "f5981812-40df-4967-a6f2-67fde4013f73",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without scopes\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "698acc81-c9e3-4815-8770-194dce55515b",
      "name": "Set HOST Address to Local URL",
      "url": "{{dummy_api}}",
      "description": "",
      "data": null,
      "dataMode": null,
      "headerData": [],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "e9b36741-c9cc-458b-b941-3b0a21984804",
            "exec": [
              "pm.environment.set(\"host_auth\",\"http://localhost:3001/auth/v1\");",
              "pm.environment.set(\"host_consent\",\"http://localhost:3002/subscriber/v1\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": null,
      "preRequestScript": null,
      "tests": "pm.environment.set(\"host_auth\",\"http://localhost:3001/auth/v1\");\npm.environment.set(\"host_consent\",\"http://localhost:3002/subscriber/v1\");",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "",
      "pathVariables": []
    },
    {
      "id": "6c639261-4eef-4f96-8759-2b437eb390ba",
      "name": "Fail without Developer Id Revoke a Consent",
      "url": "{{host_consent}}/revoke/{{subscriber_id}}",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without scopes\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dc6e7de6-b81b-45da-b2cc-72b389068d0d",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without scopes\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"app_id\": \"a46fa81d-9941-42c1-8b47-c8d57be4acc24\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "732f218e-61f5-47d4-8756-886e2085e86d",
      "name": "Fail for No developer id in request body Create Black List app ",
      "url": "{{host_consent}}/blacklist",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "ffad7c8c-560e-437c-befc-28d542ba6e8a",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "dca3c364-4c37-44a5-9c28-2415950b5741",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without App Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "d8386523-1aba-4c9d-bfac-7b7e7de0e728",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"subscriber_id\": \"{{subscriber_id}}\",\n  \"app_id\": \"dfdfsds\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "7ef9600a-df4b-4f19-bfaf-2a8ef8f90972",
      "name": "Fail without Subscriber Id Revoke a Consent ",
      "url": "{{host_consent}}/revoke",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
            "exec": [
              "pm.test(\"Status code is 404\", function () {",
              "    pm.response.to.have.status(404);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dc6e7de6-b81b-45da-b2cc-72b389068d0d",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "pm.test(\"Status code is 404\", function () {\n    pm.response.to.have.status(404);\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"app_id\": \"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n  \"developer_id\": \"{{developer_id}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "818cffae-4128-46d7-bc9f-8091a41930fb",
      "name": "Successfully Invalidate Transaction",
      "url": "{{host_auth}}/transaction/{{transaction_id}}/invalidate",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "value": "application/json",
          "type": "text"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "b354d6e8-181f-446f-a821-ef6d2865ed33",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "79baf8a9-fec4-457a-93d5-d9299753785f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "558c781e-6dcf-4fc1-a0d8-2f18443bf67b",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"subscriber_id\":\"{{subscriber_id}}\",\n\t\"app_id\":\"{{app_id}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "8856f327-05b1-4ed1-bced-7d7a196f1506",
      "name": "Fail without appname Update a Consent",
      "url": "{{host_consent}}/consent?",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [
        {
          "key": "",
          "value": "",
          "enabled": false
        }
      ],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without appname\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "f5981812-40df-4967-a6f2-67fde4013f73",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without appname\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"1chei39ejifj\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ]\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "91dcd1af-e702-4559-bc7a-32a3d0b3fd1b",
      "name": "Fail without Subscriber Id in Update a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without subscriber Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "f5981812-40df-4967-a6f2-67fde4013f73",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without subscriber Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "92b9d07a-6b16-45a9-8199-f501e93471e6",
      "name": "Fail with invalid transaction ID Update Transaction with PATCH",
      "url": "{{host_auth}}/transaction/4545",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PATCH",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "// pm.test(\"Should contain response properties as needed\", function () {",
              "//     let jsonData = pm.response.json();",
              "//     pm.expect(jsonData).to.have.property(\"transaction_id\");",
              "//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");",
              " ",
              "// });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "e1484585-734f-4c61-b122-b44238a2b31e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\n// pm.test(\"Should contain response properties as needed\", function () {\n//     let jsonData = pm.response.json();\n//     pm.expect(jsonData).to.have.property(\"transaction_id\");\n//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");\n \n// });",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"response_type\": \"sample_type2q\",\n  \"subscriber_id\": \"type21\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"asasa\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\",\n  \"status\": 0\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "94f150ad-7fe0-4367-bf31-8a7e2a7c6231",
      "name": "Fail without Subscriber Id Get Consent App List",
      "url": "{{host_consent}}/consent/list",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "df1c7a15-8da0-4de3-83a1-428764608081",
            "exec": [
              "",
              "// fail cases",
              "pm.test(\"Status code should not be 200\", function () {",
              "    pm.expect(pm.response.code).not.equal(200);",
              "});",
              "// fail cases",
              "pm.test(\"Status code should be 404\", function () {",
              "    pm.expect(pm.response.code).to.eql(404);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "07dc6efe-6b65-4b0e-b73d-b83e5a462e82",
      "preRequestScript": null,
      "tests": "\n// fail cases\npm.test(\"Status code should not be 200\", function () {\n    pm.expect(pm.response.code).not.equal(200);\n});\n// fail cases\npm.test(\"Status code should be 404\", function () {\n    pm.expect(pm.response.code).to.eql(404);\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "9c2b9746-e19a-418f-a72e-67ff302e78ab",
      "name": "Fail to Generate OTP, NO Mobile No.",
      "url": "{{host_auth}}/generate/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should contain BadRequest in Error Code\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"msisdn\" : \"\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": true\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "9eb526df-2ace-4d80-9268-7bf7c8bbe90b",
      "name": "Fail without App Id Revoke a Consent",
      "url": "{{host_consent}}/revoke/{{subscriber_id}}",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without scopes\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dc6e7de6-b81b-45da-b2cc-72b389068d0d",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without scopes\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"developer_id\": \"{{developer_id}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "a063b353-6be1-4bc0-9b92-cd359c3cfa48",
      "name": "Fail to Generate OTP, Wrong Mobile No. Copy",
      "url": "{{host_auth}}/generate/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should contain BadRequest in Error Code\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"msisdn\" : \"0937006210\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": true,\n    \"transaction_id\": \"{{transaction_id}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "a4f08bad-7505-4f53-a4ee-21b8447ac710",
      "name": "Fail without Subscriber Id Revoke All Consent  ",
      "url": "{{host_consent}}/revoke/all",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "cc769081-4ce5-4be8-be97-931e4fdc8688",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// update consent",
              "function updateConsent(err, response) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "4be54013-2a48-4526-913b-a46d4a7d3dfc",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without App Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "a1e637cb-9992-47b2-be06-2d0e8c83af5b",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response));\n}\n// update consent\nfunction updateConsent(err, response) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);",
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "a7a82407-4245-42cd-b9e1-b4866f5aa571",
      "name": "Prod Env Generate Access Token SMS",
      "url": "https://developer.globelabs.com.ph/oauth/access_token?app_id=g57rF5a7b7u7oi58xec7oKudp5onFGKz&app_secret=35fa1a9283c9bef3bd930d231aa19390cfac1cb9ab9ad9226b2b9014d4e83743&code=ys5oAoEFq7yKzFb9AM8fBGLEgSnEeA7IdgyX6F7Mj8zsKEjgLHL4nagCRXAajFgyo8BtE898BhK7qGEUnozMeH9nL9bHLz4zqsGE5Lzs5R5rAha4ARbfodBaetq5idjb7agTBnLtKGAXEf9B598h9454xsKd4gesaoLBkHp6zpzHBbqMGUb59R6hzpojBtebAE9F7jnKACArjnbHbzjz4so5yR6FAjeBAILMLLnSXxARyfK7yGzFnAA5GFGkpbXs",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [
        {
          "key": "app_id",
          "value": "g57rF5a7b7u7oi58xec7oKudp5onFGKz",
          "equals": true
        },
        {
          "key": "app_secret",
          "value": "35fa1a9283c9bef3bd930d231aa19390cfac1cb9ab9ad9226b2b9014d4e83743",
          "equals": true
        },
        {
          "key": "code",
          "value": "ys5oAoEFq7yKzFb9AM8fBGLEgSnEeA7IdgyX6F7Mj8zsKEjgLHL4nagCRXAajFgyo8BtE898BhK7qGEUnozMeH9nL9bHLz4zqsGE5Lzs5R5rAha4ARbfodBaetq5idjb7agTBnLtKGAXEf9B598h9454xsKd4gesaoLBkHp6zpzHBbqMGUb59R6hzpojBtebAE9F7jnKACArjnbHbzjz4so5yR6FAjeBAILMLLnSXxARyfK7yGzFnAA5GFGkpbXs",
          "equals": true
        }
      ],
      "auth": null,
      "events": null,
      "folder": "27a82277-3109-4795-b2e8-690492a7fa48",
      "responses": [
        {
          "id": "5cfec7d0-4c08-450b-8796-4106239c25d5",
          "name": "Generate SMS Access Token",
          "status": "OK",
          "mime": "",
          "language": "json",
          "text": "{\n    \"access_token\": \"6GrMfC6kCiNE9CqGigDXcYxio8mznHWz4rGAWwdXv8w\",\n    \"subscriber_number\": \"9952558864\"\n}",
          "responseCode": {
            "code": 200,
            "name": "OK",
            "detail": ""
          },
          "requestObject": {
            "id": "679056f4-b49b-47e4-aa83-ed137f31b45b",
            "method": "POST",
            "headers": "",
            "dataMode": "raw",
            "data": "",
            "url": "https://developer.globelabs.com.ph/oauth/access_token?app_id=ERqeuxn59nuXkc8Mr6T5KGuyRR6ruaxL&app_secret=646b7d0f978e1967f82921aa2c36edde569d544d9485242a6edc7232aeb91f05&code=qCAzr8Auar4boUzEgBphe6eKpF6jnjzHLRK65uLen8aCRg7nKf9g4BoFerr8qUB476xSxdMMoFpxbgBF4j9youeAEG8CpKxzdFk8Ld6t7AzRgSroB9GSyoyoGhRdiAqK9naTyMXhR9BoASKdzaRSAjLnptRjx4rF6kEbKCK499RuoGb6MFp9MzMFy97pBSb9rGRUoK4b6FLn7E8fzBn5dCdeKdBunqn4xHp8eb5FAXg85h9d47nUEGrMRuoAeerC",
            "pathVariableData": [],
            "queryParams": [
              {
                "key": "app_id",
                "value": "ERqeuxn59nuXkc8Mr6T5KGuyRR6ruaxL",
                "equals": true
              },
              {
                "key": "app_secret",
                "value": "646b7d0f978e1967f82921aa2c36edde569d544d9485242a6edc7232aeb91f05",
                "equals": true
              },
              {
                "key": "code",
                "value": "qCAzr8Auar4boUzEgBphe6eKpF6jnjzHLRK65uLen8aCRg7nKf9g4BoFerr8qUB476xSxdMMoFpxbgBF4j9youeAEG8CpKxzdFk8Ld6t7AzRgSroB9GSyoyoGhRdiAqK9naTyMXhR9BoASKdzaRSAjLnptRjx4rF6kEbKCK499RuoGb6MFp9MzMFy97pBSb9rGRUoK4b6FLn7E8fzBn5dCdeKdBunqn4xHp8eb5FAXg85h9d47nUEGrMRuoAeerC",
                "equals": true
              }
            ],
            "headerData": []
          },
          "headers": [
            {
              "key": "Cache-Control",
              "value": "max-age=0, private, must-revalidate"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Date",
              "value": "Tue, 19 Mar 2019 11:05:27 GMT"
            },
            {
              "key": "ETag",
              "value": "\"0dfebb74b9d3edbf75fc59bca2f320e0\""
            },
            {
              "key": "Server",
              "value": "nginx/1.8.0"
            },
            {
              "key": "Status",
              "value": "200 OK"
            },
            {
              "key": "X-Rack-Cache",
              "value": "invalidate, pass"
            },
            {
              "key": "X-Request-Id",
              "value": "1e20541d1c4f7e1a8065eedf5a0376db"
            },
            {
              "key": "X-Runtime",
              "value": "0.120295"
            },
            {
              "key": "X-UA-Compatible",
              "value": "IE=Edge,chrome=1"
            },
            {
              "key": "Content-Length",
              "value": "95"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            }
          ],
          "cookies": [],
          "request": "a7a82407-4245-42cd-b9e1-b4866f5aa571",
          "collection": "78b9faa1-1d16-4621-9eff-925b205944f2"
        }
      ],
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "",
      "headers": "",
      "pathVariables": []
    },
    {
      "id": "ab914a89-9ead-41bd-9f3f-226489816aec",
      "name": "Stage Env Generate Access Token SMS",
      "url": "http://ippweb.infoshiftinc.com/oauth/access_token?app_id=q4jo5fdyRb8tBgcnj5iR6gtEajK5fdze&app_secret=3e72fe93b25c2412bcf23bfcd484d7f43f996ac7f2fde206553b741703156eab&code=KK7s59qy8tqay6btn6e8AtL5GjyuyayqeF656q8u8arGnhqdnqGU87eKoU7KrRAsyAq9Kfq78rqfy4kbphzGEgES8dR8kF4XGLdh8pEKyHnxLoqsXA8abfgLyBqf4RTLkacyzefLn87dfXELG7saLEnMH68GdphzdREbFaKE5MSMqkBAhGL84dfxKqAxf89r8nsx7eboUEenbkUGEreXh5864puMRyLpFLzG7xuLXedytEryrjtB5q6ptEoKkMsE",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [
        {
          "key": "app_id",
          "value": "q4jo5fdyRb8tBgcnj5iR6gtEajK5fdze",
          "equals": true
        },
        {
          "key": "app_secret",
          "value": "3e72fe93b25c2412bcf23bfcd484d7f43f996ac7f2fde206553b741703156eab",
          "equals": true
        },
        {
          "key": "code",
          "value": "KK7s59qy8tqay6btn6e8AtL5GjyuyayqeF656q8u8arGnhqdnqGU87eKoU7KrRAsyAq9Kfq78rqfy4kbphzGEgES8dR8kF4XGLdh8pEKyHnxLoqsXA8abfgLyBqf4RTLkacyzefLn87dfXELG7saLEnMH68GdphzdREbFaKE5MSMqkBAhGL84dfxKqAxf89r8nsx7eboUEenbkUGEreXh5864puMRyLpFLzG7xuLXedytEryrjtB5q6ptEoKkMsE",
          "equals": true
        }
      ],
      "auth": null,
      "events": null,
      "folder": "27a82277-3109-4795-b2e8-690492a7fa48",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "",
      "headers": "",
      "pathVariables": []
    },
    {
      "id": "aefddb80-d559-443e-b184-81c823ab9833",
      "name": "Fail without App Id in Create a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without App Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "6d426468-e456-4c85-af51-c3f903b74e2e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "b22bb7a5-044d-40b4-9ddc-d222f9740aed",
      "name": "Fail without App Id in Update a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without App Id\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "f5981812-40df-4967-a6f2-67fde4013f73",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without App Id\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "b3f6cc57-651d-4cb0-97c7-76dceab63beb",
      "name": "Successfully Update Transaction",
      "url": "{{host_auth}}/transaction/{{transaction_id}}",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Should contain response properties as needed\", function () {",
              "    let jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property(\"response_type\");",
              "    pm.expect(jsonData.response_type).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"client_id\");",
              "    pm.expect(jsonData.client_id).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"redirect_uri\");",
              "    pm.expect(jsonData.redirect_uri).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"scopes\");",
              "    pm.expect(jsonData.scopes).to.be.a(\"array\");",
              "        pm.expect(jsonData).to.have.property(\"state\");",
              "    pm.expect(jsonData.state).to.be.a(\"string\");",
              "      pm.expect(jsonData).to.have.property(\"auth_state\");",
              "    pm.expect(jsonData.auth_state).to.be.a(\"number\");",
              "        pm.expect(jsonData).to.have.property(\"subscriber_id\");",
              "    pm.expect(jsonData.app_id).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"app_id\");",
              "    pm.expect(jsonData.app_id).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"developer_id\");",
              "    pm.expect(jsonData.developer_id).to.be.a(\"string\");",
              " ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "e1484585-734f-4c61-b122-b44238a2b31e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"response_type\");\n    pm.expect(jsonData.response_type).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"client_id\");\n    pm.expect(jsonData.client_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"redirect_uri\");\n    pm.expect(jsonData.redirect_uri).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"scopes\");\n    pm.expect(jsonData.scopes).to.be.a(\"array\");\n        pm.expect(jsonData).to.have.property(\"state\");\n    pm.expect(jsonData.state).to.be.a(\"string\");\n      pm.expect(jsonData).to.have.property(\"auth_state\");\n    pm.expect(jsonData.auth_state).to.be.a(\"number\");\n        pm.expect(jsonData).to.have.property(\"subscriber_id\");\n    pm.expect(jsonData.app_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"app_id\");\n    pm.expect(jsonData.app_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"developer_id\");\n    pm.expect(jsonData.developer_id).to.be.a(\"string\");\n \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"response_type\": \"sample_type2q\",\n  \"subscriber_id\": \"type21\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"asasa\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\",\n  \"status\": 0\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "b46b21d9-4164-4710-a73d-7ff6752a1d92",
      "name": "Fail Verify TOTP, No OTP",
      "url": "{{host_auth}}/verify/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "ba15bf65-0126-46b5-8b21-2c5abd091cd9",
      "name": "Successfully Not Conent for Get Transaction with invalid Transaction ID",
      "url": "{{host_auth}}/transaction/fd7447",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 204\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "b87469d2-b1bc-4433-aca1-577853322874",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 204\", function () {\n    pm.response.to.have.status(204);\n});\n\n\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "ba82795b-9b2b-49f4-ba8f-6266d05aa826",
      "name": "Failed to  Verify TOTP, OTP already verified",
      "url": "{{host_auth}}/verify/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test(\"Your test name\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql('InvalidOTP');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\npm.test(\"Your test name\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql('InvalidOTP');\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"{{otp}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "ca9f3b47-6d0b-423f-a89d-4a8749169f25",
      "name": "Successfully Create a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "value": "application/json",
          "type": "text"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              "const uuid = require('uuid');",
              "function setEnv (key, value)  {",
              "    pm.environment.set(key, value);",
              "}",
              "",
              "function getEnv (key)  {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "setEnv('app_id', uuid.v4());",
              "setEnv('developer_id', uuid.v4());",
              "pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id:getEnv('app_id'),blacklist: true})",
              "    }",
              "}, function (err, response) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "    if (subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id);",
              "    }",
              "",
              "    console.log(getEnv('subscriber_id'), getEnv('app_id'));",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    }, function(err, response){",
              "        let {transaction_id} = response.json();",
              "        if(transaction_id) {",
              "            setEnv('transaction_id',transaction_id);",
              "        }",
              "        console.log(getEnv('subscriber_id'), getEnv('app_id'), getEnv('subscriber_id'));",
              "    });",
              "});",
              "",
              "",
              "",
              "",
              "    ",
              "",
              "",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "470624d9-fb2a-4355-bbff-071a9ea3c500",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code is 201 or 302 or 200\", function () {",
              "    pm.expect(_responseCode).to.be.oneOf([201,200,302]);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain response properties as needed\", function () {",
              "    let jsonData = pm.response.json();",
              "",
              "    switch(_responseCode) {",
              "        case 201: case 200:",
              "            pm.expect(jsonData).to.have.property(\"old_token\");",
              "            pm.expect(jsonData).to.have.property(\"old_token_value\");",
              "            pm.expect(jsonData.old_token).to.eql(false);",
              "            pm.expect(jsonData.old_token_value).to.eql(\"\");",
              "            break;",
              "        case 302:",
              "            pm.expect(jsonData).to.have.property(\"status\");",
              "            pm.expect(jsonData.status).to.eql('Record already Exists!');",
              "            break;",
              "            ",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "6d426468-e456-4c85-af51-c3f903b74e2e",
      "preRequestScript": "const uuid = require('uuid');\nfunction setEnv (key, value)  {\n    pm.environment.set(key, value);\n}\n\nfunction getEnv (key)  {\n    return pm.environment.get(key);\n}\n\nsetEnv('app_id', uuid.v4());\nsetEnv('developer_id', uuid.v4());\npm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id:getEnv('app_id'),blacklist: true})\n    }\n}, function (err, response) {\n    let {subscriber_id, app_id, otp} = response.json();\n    if (subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id);\n    }\n\n    console.log(getEnv('subscriber_id'), getEnv('app_id'));\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    }, function(err, response){\n        let {transaction_id} = response.json();\n        if(transaction_id) {\n            setEnv('transaction_id',transaction_id);\n        }\n        console.log(getEnv('subscriber_id'), getEnv('app_id'), getEnv('subscriber_id'));\n    });\n});\n\n\n\n\n    \n\n\n",
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code is 201 or 302 or 200\", function () {\n    pm.expect(_responseCode).to.be.oneOf([201,200,302]);\n});\n\n//  \npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n\n    switch(_responseCode) {\n        case 201: case 200:\n            pm.expect(jsonData).to.have.property(\"old_token\");\n            pm.expect(jsonData).to.have.property(\"old_token_value\");\n            pm.expect(jsonData.old_token).to.eql(false);\n            pm.expect(jsonData.old_token_value).to.eql(\"\");\n            break;\n        case 302:\n            pm.expect(jsonData).to.have.property(\"status\");\n            pm.expect(jsonData.status).to.eql('Record already Exists!');\n            break;\n            \n    }\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ],\n  \"appname\" : \"{{appname}}\"\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "cb57ba0e-0ceb-45b5-ae9e-9ca13d6f1b62",
      "name": "Successfully Verify TOTP",
      "url": "{{host_auth}}/verify/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "value": "application/json",
          "type": "text"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"{{otp}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "ccc6f266-f237-49c4-b1eb-a0f47a822458",
      "name": "Successfully Generate TOTP",
      "url": "{{host_auth}}/generate/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "value": "application/json",
          "type": "text"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.environment.set(\"app_id\", pm.response.json().app_id);",
              "pm.environment.set(\"subscriber_id\", pm.response.json().subscriber_id);",
              "pm.environment.set(\"otp\", pm.response.json().otp);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 201\", function () {\n    pm.response.to.have.status(201);\n});\n\npm.environment.set(\"app_id\", pm.response.json().app_id);\npm.environment.set(\"subscriber_id\", pm.response.json().subscriber_id);\npm.environment.set(\"otp\", pm.response.json().otp);\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"msisdn\" : \"{{sms_address}}\",\n    \"app_id\" :\"a46fa81d-9941-42c1-8b47-c8d57be4acc24\",\n    \"blacklist\": true,\n    \"transaction_id\": \"{{transaction_id}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "d0ae1465-a608-4f2c-8b39-5336a7c6317f",
      "name": "Successfully Update Transaction with PATCH",
      "url": "{{host_auth}}/transaction/{{transaction_id}}",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "PATCH",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "// pm.test(\"Should contain response properties as needed\", function () {",
              "//     let jsonData = pm.response.json();",
              "//     pm.expect(jsonData).to.have.property(\"transaction_id\");",
              "//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");",
              " ",
              "// });"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "e1484585-734f-4c61-b122-b44238a2b31e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\n// pm.test(\"Should contain response properties as needed\", function () {\n//     let jsonData = pm.response.json();\n//     pm.expect(jsonData).to.have.property(\"transaction_id\");\n//     pm.expect(jsonData.transaction_id).to.be.a(\"string\");\n \n// });",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n  \"response_type\": \"sample_type2q\",\n  \"subscriber_id\": \"type21\",\n  \"client_id\": \"e2274bcab5aa452c7ae03165\",\n  \"redirect_uri\": \"url\",\n  \"scopes\": [\n    \"scope1\",\n    \"asasa\"\n  ],\n  \"state\": \"string_value\",\n  \"auth_state\": 0,\n  \"app_id\": \"FnyqFzJKZ5hrSB9JARCSpt90tgPN\",\n  \"developer_id\": \"j33ufh8hifjijdfdtgPN\",\n  \"status\": 0\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "d339ae38-a10c-4107-8d9e-0712a1c31ae9",
      "name": "Successful Update a Consent",
      "url": "{{host_consent}}/consent",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "PUT",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "28c28f5c-2742-4cd7-be3e-b92b1f93ca07",
            "exec": [
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})",
              "    }",
              "}, function (err, response) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "    if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    }, function(err, response){",
              "        if (response.json().transaction_id){",
              "          setEnv('transaction_id', response.json().transaction_id);",
              "        }",
              " ",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, function(err, response){",
              "        console.log({err});",
              "    });",
              "    });",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "609830bc-110d-48d8-aae0-bb1db5241bef",
            "exec": [
              "",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.eql(200);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain properties old_token and old_token_value \", function () {",
              "    let jsonData = pm.response.json();",
              "    //  response has property old_token, old_token_value",
              "    pm.expect(jsonData).to.have.property(\"old_token\");",
              "    pm.expect(jsonData).to.have.property(\"old_token_value\");",
              "});",
              "",
              "",
              "pm.test(\"Should have resepective values for old_token and old_token_value\", function () {",
              "    let jsonData = pm.response.json();",
              "    //  check old_token property has only boolean",
              "    pm.expect(jsonData.old_token).to.be.oneOf([true, false]);",
              "    //  truthy value should have truthy  value",
              "    if (jsonData.old_token) {",
              "        pm.expect(jsonData.old_token_value).not.equal(\"\");",
              "    } else {",
              "        pm.expect(jsonData.old_token_value).to.eql(\"\");",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "f5981812-40df-4967-a6f2-67fde4013f73",
      "preRequestScript": "let setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\npm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:'09273164035',app_id:'c8b37b4f08b02dac715e64cf162964w8',blacklist: true})\n    }\n}, function (err, response) {\n    let {subscriber_id, app_id, otp} = response.json();\n    if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    }, function(err, response){\n        if (response.json().transaction_id){\n          setEnv('transaction_id', response.json().transaction_id);\n        }\n \n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, function(err, response){\n        console.log({err});\n    });\n    });\n});",
      "tests": "\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code is 200\", function () {\n    pm.expect(pm.response.code).to.eql(200);\n});\n\n//  \npm.test(\"Should contain properties old_token and old_token_value \", function () {\n    let jsonData = pm.response.json();\n    //  response has property old_token, old_token_value\n    pm.expect(jsonData).to.have.property(\"old_token\");\n    pm.expect(jsonData).to.have.property(\"old_token_value\");\n});\n\n\npm.test(\"Should have resepective values for old_token and old_token_value\", function () {\n    let jsonData = pm.response.json();\n    //  check old_token property has only boolean\n    pm.expect(jsonData.old_token).to.be.oneOf([true, false]);\n    //  truthy value should have truthy  value\n    if (jsonData.old_token) {\n        pm.expect(jsonData.old_token_value).not.equal(\"\");\n    } else {\n        pm.expect(jsonData.old_token_value).to.eql(\"\");\n    }\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n   \n    \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"{{transaction_id}}\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [\n    \"sms\",\n    \"location\",\n    \"sns\",\n    \"contacts\"\n  ],\n  \"appname\" : \"{{appname}}\",\n  \"access_token\": \"{{$guid}}\"\n}\n  \n  \n\n  \n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "ddd7b9d8-2821-47b8-8884-19df90a96d18",
      "name": "Fail without appname Create a Consent",
      "url": "{{host_consent}}/consent?",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [
        {
          "key": "",
          "value": "",
          "enabled": false
        }
      ],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "83874ba4-e766-459e-8666-76f0fba8578f",
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "d0529d32-6e2b-4def-bdca-0c426e5ba52f",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should Be a badRequest without appname\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "6d426468-e456-4c85-af51-c3f903b74e2e",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should Be a badRequest without appname\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\n      \"subscriber_id\": \"{{subscriber_id}}\",\n    \"transaction_id\": \"1chei39ejifj\",\n    \"app_id\": \"{{app_id}}\",\n  \"developer_id\": \"{{developer_id}}\",\n  \"scopes\": [ \"sms\", \"location\" ]\n}\n",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "e2c1f845-181f-4da9-a231-f03b07e9b646",
      "name": "Successfully Get Transaction",
      "url": "{{host_auth}}/transaction/{{transaction_id}}",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "",
              "pm.test(\"Should contain response properties as needed\", function () {",
              "    let jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property(\"response_type\");",
              "    pm.expect(jsonData.response_type).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"client_id\");",
              "    pm.expect(jsonData.client_id).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"redirect_uri\");",
              "    pm.expect(jsonData.redirect_uri).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"scopes\");",
              "    pm.expect(jsonData.scopes).to.be.a(\"array\");",
              "        pm.expect(jsonData).to.have.property(\"state\");",
              "    pm.expect(jsonData.state).to.be.a(\"string\");",
              "      pm.expect(jsonData).to.have.property(\"auth_state\");",
              "    pm.expect(jsonData.auth_state).to.be.a(\"number\");",
              "        pm.expect(jsonData).to.have.property(\"subscriber_id\");",
              "    pm.expect(jsonData.app_id).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"app_id\");",
              "    pm.expect(jsonData.app_id).to.be.a(\"string\");",
              "        pm.expect(jsonData).to.have.property(\"developer_id\");",
              "    pm.expect(jsonData.developer_id).to.be.a(\"string\");",
              " ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "b87469d2-b1bc-4433-aca1-577853322874",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\n\npm.test(\"Should contain response properties as needed\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"response_type\");\n    pm.expect(jsonData.response_type).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"client_id\");\n    pm.expect(jsonData.client_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"redirect_uri\");\n    pm.expect(jsonData.redirect_uri).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"scopes\");\n    pm.expect(jsonData.scopes).to.be.a(\"array\");\n        pm.expect(jsonData).to.have.property(\"state\");\n    pm.expect(jsonData.state).to.be.a(\"string\");\n      pm.expect(jsonData).to.have.property(\"auth_state\");\n    pm.expect(jsonData.auth_state).to.be.a(\"number\");\n        pm.expect(jsonData).to.have.property(\"subscriber_id\");\n    pm.expect(jsonData.app_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"app_id\");\n    pm.expect(jsonData.app_id).to.be.a(\"string\");\n        pm.expect(jsonData).to.have.property(\"developer_id\");\n    pm.expect(jsonData.developer_id).to.be.a(\"string\");\n \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "e4577c4d-1ce7-43e0-99c5-dc0e299c5c5a",
      "name": "Set HOST Address to Remote URL",
      "url": "{{dummy_api}}",
      "description": "",
      "data": null,
      "dataMode": null,
      "headerData": [],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "01d5ea79-23d9-4b18-8d4a-32cd1ead11cc",
            "exec": [
              "pm.environment.set(\"host_auth\",\"http://13.232.77.36:3001/auth/v1\");",
              "pm.environment.set(\"host_auth\",\"http://13.232.77.36:3002/subscriber/v1\");"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": null,
      "preRequestScript": null,
      "tests": "pm.environment.set(\"host_auth\",\"http://13.232.77.36:3001/auth/v1\");\npm.environment.set(\"host_auth\",\"http://13.232.77.36:3002/subscriber/v1\");",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "",
      "pathVariables": []
    },
    {
      "id": "e8262d54-949b-41fe-82ed-d20e48c33dd2",
      "name": "Send SMS",
      "url": "{{host_auth}}/test/sms",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "09d7a369-cbd8-49e7-8f5a-571ebfcde109",
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.environment.set(\"transaction_id\", pm.response.json().transaction_id);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "3be36853-e2e8-4e90-bf88-5bd9a924c499",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 200\", function () {\n    pm.response.to.have.status(200);\n});\n\npm.environment.set(\"transaction_id\", pm.response.json().transaction_id);",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n\t\"app_id\": \"{{app_id}}\",\n\t\"subscriber_id\": \"{{subscriber_id}}\",\n\t\"otp\": \"{{otp}}\"\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "f20ad259-37c8-4fc5-ba59-ab66011c479b",
      "name": "Fail to Generate OTP, Account is blocked",
      "url": "{{host_auth}}/generate/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 403\", function () {",
              "    pm.response.to.have.status(403);",
              "});",
              "",
              "",
              "pm.test(\"Should Contain Unauthorized in error code\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"Unauthorized\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "id": "77a621a9-9252-47dc-9185-40a7ba6fe433",
            "exec": [
              "function verifyOtp() {",
              " pm.sendRequest({",
              "        url: pm.environment.get(\"host_auth\")+\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body : {",
              "            mode: 'raw',",
              "            raw : JSON.stringify({subscriber_id: \"{{subscriber_id}}\", app_id: app_id, otp:'123456'})",
              "        }",
              "    },function(err, response){",
              "        console.log(err);",
              "        console.log(response)",
              "    });",
              "}",
              "function generateOtp() {",
              "    pm.sendRequest({",
              "    url: pm.environment.get(\"host_auth\")+\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:\"9165974395\",app_id:'c8b37b4f08b02dac715e64cf162964f8',blacklist: true})",
              "    }",
              "}, function (err, response) {",
              "    console.log(response.json())",
              "    let {subscriber_id, app_id, otp}= response.json();",
              "})",
              "}",
              "",
              "function init(callback){",
              "    // for (let i=0; i<3; i++) {",
              "    //     verifyOtp();",
              "    // }",
              "    callback();",
              "}",
              "",
              "",
              "init(generateOtp);",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
      "preRequestScript": "function verifyOtp() {\n pm.sendRequest({\n        url: pm.environment.get(\"host_auth\")+\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body : {\n            mode: 'raw',\n            raw : JSON.stringify({subscriber_id: \"{{subscriber_id}}\", app_id: app_id, otp:'123456'})\n        }\n    },function(err, response){\n        console.log(err);\n        console.log(response)\n    });\n}\nfunction generateOtp() {\n    pm.sendRequest({\n    url: pm.environment.get(\"host_auth\")+\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:\"9165974395\",app_id:'c8b37b4f08b02dac715e64cf162964f8',blacklist: true})\n    }\n}, function (err, response) {\n    console.log(response.json())\n    let {subscriber_id, app_id, otp}= response.json();\n})\n}\n\nfunction init(callback){\n    // for (let i=0; i<3; i++) {\n    //     verifyOtp();\n    // }\n    callback();\n}\n\n\ninit(generateOtp);\n",
      "tests": "pm.test(\"Status code is 403\", function () {\n    pm.response.to.have.status(403);\n});\n\n\npm.test(\"Should Contain Unauthorized in error code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"Unauthorized\");\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"msisdn\" : \"09273164032\",\n    \"app_id\" :\"c8b37b4f08b02dac715e64cf162964f8\",\n    \"blacklist\": true\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "f59beb01-f688-482d-89a9-88107844e02a",
      "name": "Fail to Generate OTP, NO APP ID",
      "url": "{{host_auth}}/generate/totp",
      "description": null,
      "data": [],
      "dataMode": "raw",
      "headerData": [
        {
          "key": "Content-Type",
          "name": "Content-Type",
          "type": "text",
          "value": "application/json"
        }
      ],
      "method": "POST",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "2a13b420-0332-4461-b1b2-7426a4a5ddd7",
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "",
              "pm.test(\"Should contain BadRequest in Error Code\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");",
              "});",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "dd8e3b6e-8134-4cb5-9406-446c77ee5b65",
      "preRequestScript": null,
      "tests": "pm.test(\"Status code is 400\", function () {\n    pm.response.to.have.status(400);\n});\n\n\npm.test(\"Should contain BadRequest in Error Code\", function () {\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.error_code).to.eql(\"BadRequest\");\n});\n",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "rawModeData": "{\n    \"msisdn\" : \"09273164031\",\n    \"app_id\" :\"\",\n    \"blacklist\": true\n}",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "f648c5ac-5ec2-4208-8c0a-a9b06e7453e6",
      "name": "Success Check App is BlackListed",
      "url": "{{host_consent}}/blacklist/{{subscriber_id}}/{{app_id}}",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json",
          "enabled": false
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "prerequest",
          "script": {
            "id": "49f97bba-5e31-43c1-8e81-981b2b0b59d7",
            "exec": [
              "// get postman env",
              "let setEnv = (key, value) => {",
              "    pm.environment.set(key, value);",
              "};",
              "//  get postman env",
              "let getEnv = (key) => {",
              "    return pm.environment.get(key);",
              "}",
              "",
              "",
              "// generate otp",
              "function generateOtp(cb) {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_auth\") +\"/generate/totp\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: ",
              "        getEnv('app_id'), blacklist: true})",
              "    }",
              "}, (err, response) => cb(err, response, createConsent) );",
              "}",
              "",
              "",
              "// verify otp",
              "function verifyOtp(err, response, cb) {",
              "    let {subscriber_id, app_id, otp} = response.json();",
              "      if(subscriber_id && app_id) {",
              "        setEnv('subscriber_id', subscriber_id);",
              "        setEnv('app_id', app_id); ",
              "    }",
              "    pm.sendRequest({",
              "        url: getEnv(\"host_auth\") +\"/verify/totp\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})",
              "        }",
              "    },(err, response) => cb(err, response, updateConsent));",
              "}",
              "// create consent",
              "function createConsent(err, response, cb) {",
              "   if(response.json().transaction_id) {",
              "         setEnv('transaction_id', response.json().transaction_id);",
              "    }",
              "        //  creating consent",
              "        pm.sendRequest({",
              "        url: getEnv(\"host_consent\") +\"/consent\",",
              "        method: 'POST',",
              "        header: {",
              "            'content-type': 'application/json'",
              "        },",
              "        body: {",
              "            mode: 'raw',",
              "            raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname')})",
              "        }",
              "    }, (err, response) => cb(err, response, createBlacklist));",
              "}",
              "// update consent",
              "function updateConsent(err, response,cb ) {",
              "   ",
              "  ",
              "        //  creating consent",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/consent\",",
              "    method: 'PUT',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        transaction_id : getEnv('transaction_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id'),",
              "        scopes: getEnv('scopes'),",
              "        appname : getEnv('appname'),",
              "        access_token: \"GGYYYSWwx\"",
              "        })",
              "        },",
              "    }, (err, response) => cb(err, response));",
              "}",
              "// create blacklist",
              "function createBlacklist() {",
              "    pm.sendRequest({",
              "    url: getEnv(\"host_consent\") +\"/blacklist\",",
              "    method: 'POST',",
              "    header: {",
              "        'content-type': 'application/json'",
              "    },",
              "    body: {",
              "        mode: 'raw',",
              "        raw: JSON.stringify({ ",
              "        subscriber_id: getEnv('subscriber_id'),",
              "        app_id: getEnv('app_id'),",
              "        developer_id: getEnv('developer_id')",
              "        }),",
              "        }",
              "    });",
              "}",
              "//  consent flow ready",
              "",
              "//  call generate otp",
              "generateOtp(verifyOtp);",
              "",
              "//  consent flow ready",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "cba6f0a7-2eea-48e4-b94c-d79c71800791",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code should be 200\", function () {",
              "    pm.expect(_responseCode).to.eql(200);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain response (is_blacklisted) with boolean value\", function () {",
              "    let jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property(\"is_blacklisted\");",
              "    pm.expect(jsonData.is_blacklisted).to.be.a('boolean');",
              "         ",
              "    ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "865f7b91-916c-41ed-b5ac-fcbc6764f8be",
      "preRequestScript": "// get postman env\nlet setEnv = (key, value) => {\n    pm.environment.set(key, value);\n};\n//  get postman env\nlet getEnv = (key) => {\n    return pm.environment.get(key);\n}\n\n\n// generate otp\nfunction generateOtp(cb) {\n    pm.sendRequest({\n    url: getEnv(\"host_auth\") +\"/generate/totp\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({msisdn:getEnv('msisdn'), app_id: \n        getEnv('app_id'), blacklist: true})\n    }\n}, (err, response) => cb(err, response, createConsent) );\n}\n\n\n// verify otp\nfunction verifyOtp(err, response, cb) {\n    let {subscriber_id, app_id, otp} = response.json();\n      if(subscriber_id && app_id) {\n        setEnv('subscriber_id', subscriber_id);\n        setEnv('app_id', app_id); \n    }\n    pm.sendRequest({\n        url: getEnv(\"host_auth\") +\"/verify/totp\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({app_id: app_id, subscriber_id: subscriber_id, otp: otp})\n        }\n    },(err, response) => cb(err, response, updateConsent));\n}\n// create consent\nfunction createConsent(err, response, cb) {\n   if(response.json().transaction_id) {\n         setEnv('transaction_id', response.json().transaction_id);\n    }\n        //  creating consent\n        pm.sendRequest({\n        url: getEnv(\"host_consent\") +\"/consent\",\n        method: 'POST',\n        header: {\n            'content-type': 'application/json'\n        },\n        body: {\n            mode: 'raw',\n            raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname')})\n        }\n    }, (err, response) => cb(err, response, createBlacklist));\n}\n// update consent\nfunction updateConsent(err, response,cb ) {\n   \n  \n        //  creating consent\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/consent\",\n    method: 'PUT',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        transaction_id : getEnv('transaction_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id'),\n        scopes: getEnv('scopes'),\n        appname : getEnv('appname'),\n        access_token: \"GGYYYSWwx\"\n        })\n        },\n    }, (err, response) => cb(err, response));\n}\n// create blacklist\nfunction createBlacklist() {\n    pm.sendRequest({\n    url: getEnv(\"host_consent\") +\"/blacklist\",\n    method: 'POST',\n    header: {\n        'content-type': 'application/json'\n    },\n    body: {\n        mode: 'raw',\n        raw: JSON.stringify({ \n        subscriber_id: getEnv('subscriber_id'),\n        app_id: getEnv('app_id'),\n        developer_id: getEnv('developer_id')\n        }),\n        }\n    });\n}\n//  consent flow ready\n\n//  call generate otp\ngenerateOtp(verifyOtp);\n\n//  consent flow ready\n",
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 200\", function () {\n    pm.expect(_responseCode).to.eql(200);\n});\n\n//  \npm.test(\"Should contain response (is_blacklisted) with boolean value\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"is_blacklisted\");\n    pm.expect(jsonData.is_blacklisted).to.be.a('boolean');\n         \n    \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "//Content-Type: application/json\n",
      "pathVariables": []
    },
    {
      "id": "fc641f60-91b4-46cb-92bf-659f8b363798",
      "name": "Successful Get Subscriber Apps List",
      "url": "{{host_consent}}/app/search/{{subscriber_id}}",
      "description": null,
      "data": null,
      "dataMode": null,
      "headerData": [
        {
          "key": "Content-Type",
          "value": "application/json"
        }
      ],
      "method": "GET",
      "pathVariableData": [],
      "queryParams": [],
      "auth": null,
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "4ef9bf28-e96e-4249-b7ce-1ca94b182017",
            "exec": [
              "let _responseCode = pm.response.code;",
              "/*  201 for Newly created Endpoint",
              "*   302 for existing record with same scope ",
              "*/",
              "pm.test(\"Status code should be 200\", function () {",
              "    pm.expect(_responseCode).to.eql(200);",
              "});",
              "",
              "//  ",
              "pm.test(\"Should contain response (appname) with array of values\", function () {",
              "    let jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property(\"appname\");",
              "    pm.expect(jsonData.appname).to.be.a('array');",
              "    ",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "folder": "bece62c3-d3d9-4dd0-8400-b97d01c5a023",
      "preRequestScript": null,
      "tests": "let _responseCode = pm.response.code;\n/*  201 for Newly created Endpoint\n*   302 for existing record with same scope \n*/\npm.test(\"Status code should be 200\", function () {\n    pm.expect(_responseCode).to.eql(200);\n});\n\n//  \npm.test(\"Should contain response (appname) with array of values\", function () {\n    let jsonData = pm.response.json();\n    pm.expect(jsonData).to.have.property(\"appname\");\n    pm.expect(jsonData.appname).to.be.a('array');\n    \n});",
      "currentHelper": null,
      "helperAttributes": null,
      "collectionId": "78b9faa1-1d16-4621-9eff-925b205944f2",
      "headers": "Content-Type: application/json\n",
      "pathVariables": []
    }
  ]
}